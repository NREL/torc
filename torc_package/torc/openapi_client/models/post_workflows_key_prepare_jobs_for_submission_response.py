# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.2.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, ConfigDict, BaseModel, StrictStr
from torc.openapi_client.models.jobs_model import JobsModel
from typing_extensions import Annotated

class PostWorkflowsKeyPrepareJobsForSubmissionResponse(BaseModel):
    """
    PostWorkflowsKeyPrepareJobsForSubmissionResponse
    """
    jobs: Optional[Annotated[List[JobsModel], Field()]] = None
    reason: Optional[StrictStr] = None
    __properties = ["jobs", "reason"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostWorkflowsKeyPrepareJobsForSubmissionResponse:
        """Create an instance of PostWorkflowsKeyPrepareJobsForSubmissionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in jobs (list)
        _items = []
        if self.jobs:
            for _item in self.jobs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['jobs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostWorkflowsKeyPrepareJobsForSubmissionResponse:
        """Create an instance of PostWorkflowsKeyPrepareJobsForSubmissionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostWorkflowsKeyPrepareJobsForSubmissionResponse.model_validate(obj)

        _obj = PostWorkflowsKeyPrepareJobsForSubmissionResponse.model_validate({
            "jobs": [JobsModel.from_dict(_item) for _item in obj.get("jobs")] if obj.get("jobs") is not None else None,
            "reason": obj.get("reason")
        })
        return _obj



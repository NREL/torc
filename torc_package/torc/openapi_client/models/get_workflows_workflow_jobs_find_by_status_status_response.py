# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.2.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import ConfigDict, BaseModel, Field, StrictBool, StrictInt
from torc.openapi_client.models.workflow_jobs_model import WorkflowJobsModel
from typing_extensions import Annotated

class GetWorkflowsWorkflowJobsFindByStatusStatusResponse(BaseModel):
    """
    GetWorkflowsWorkflowJobsFindByStatusStatusResponse
    """
    items: Optional[Annotated[List[WorkflowJobsModel], Field()]] = None
    skip: StrictInt = Field(...)
    max_limit: StrictInt = Field(...)
    count: StrictInt = Field(...)
    total_count: StrictInt = Field(...)
    has_more: StrictBool = Field(...)
    __properties = ["items", "skip", "max_limit", "count", "total_count", "has_more"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetWorkflowsWorkflowJobsFindByStatusStatusResponse:
        """Create an instance of GetWorkflowsWorkflowJobsFindByStatusStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetWorkflowsWorkflowJobsFindByStatusStatusResponse:
        """Create an instance of GetWorkflowsWorkflowJobsFindByStatusStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetWorkflowsWorkflowJobsFindByStatusStatusResponse.model_validate(obj)

        _obj = GetWorkflowsWorkflowJobsFindByStatusStatusResponse.model_validate({
            "items": [WorkflowJobsModel.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "skip": obj.get("skip"),
            "max_limit": obj.get("max_limit"),
            "count": obj.get("count"),
            "total_count": obj.get("total_count"),
            "has_more": obj.get("has_more")
        })
        return _obj



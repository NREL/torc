# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1.13
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, ConfigDict, BaseModel, StrictBool, StrictStr
from typing_extensions import Annotated

class AutoTuneStatus(BaseModel):
    """
    AutoTuneStatus
    """
    enabled: Optional[StrictBool] = False
    job_keys: Optional[Annotated[List[StrictStr], Field()]] = None
    __properties = ["enabled", "job_keys"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AutoTuneStatus:
        """Create an instance of AutoTuneStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AutoTuneStatus:
        """Create an instance of AutoTuneStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AutoTuneStatus.model_validate(obj)

        _obj = AutoTuneStatus.model_validate({
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "job_keys": obj.get("job_keys")
        })
        return _obj



# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.2.8
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import ConfigDict, BaseModel, Field, StrictBool, StrictStr
from torc.openapi_client.models.jobs_internal import JobsInternal

class JobsModel(BaseModel):
    """
    JobsModel
    """
    name: Optional[StrictStr] = None
    command: StrictStr = Field(...)
    invocation_script: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    needs_compute_node_schedule: Optional[StrictBool] = False
    cancel_on_blocking_job_failure: Optional[StrictBool] = True
    supports_termination: Optional[StrictBool] = False
    internal: Optional[JobsInternal] = None
    key: Optional[StrictStr] = Field(None, alias="_key")
    id: Optional[StrictStr] = Field(None, alias="_id")
    rev: Optional[StrictStr] = Field(None, alias="_rev")
    __properties = ["name", "command", "invocation_script", "status", "needs_compute_node_schedule", "cancel_on_blocking_job_failure", "supports_termination", "internal", "_key", "_id", "_rev"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobsModel:
        """Create an instance of JobsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of internal
        if self.internal:
            _dict['internal'] = self.internal.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobsModel:
        """Create an instance of JobsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobsModel.model_validate(obj)

        _obj = JobsModel.model_validate({
            "name": obj.get("name"),
            "command": obj.get("command"),
            "invocation_script": obj.get("invocation_script"),
            "status": obj.get("status"),
            "needs_compute_node_schedule": obj.get("needs_compute_node_schedule") if obj.get("needs_compute_node_schedule") is not None else False,
            "cancel_on_blocking_job_failure": obj.get("cancel_on_blocking_job_failure") if obj.get("cancel_on_blocking_job_failure") is not None else True,
            "supports_termination": obj.get("supports_termination") if obj.get("supports_termination") is not None else False,
            "internal": JobsInternal.from_dict(obj.get("internal")) if obj.get("internal") is not None else None,
            "key": obj.get("_key"),
            "id": obj.get("_id"),
            "rev": obj.get("_rev")
        })
        return _obj



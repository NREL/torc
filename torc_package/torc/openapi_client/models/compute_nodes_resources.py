# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.2.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import ConfigDict, BaseModel, Field, StrictFloat, StrictInt, StrictStr

class ComputeNodesResources(BaseModel):
    """
    ComputeNodesResources
    """
    num_cpus: StrictInt = Field(...)
    memory_gb: Union[StrictFloat, StrictInt] = Field(...)
    num_gpus: Optional[StrictInt] = None
    num_nodes: Optional[StrictInt] = None
    time_limit: Optional[StrictStr] = None
    scheduler_config_id: Optional[StrictStr] = None
    __properties = ["num_cpus", "memory_gb", "num_gpus", "num_nodes", "time_limit", "scheduler_config_id"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ComputeNodesResources:
        """Create an instance of ComputeNodesResources from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ComputeNodesResources:
        """Create an instance of ComputeNodesResources from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ComputeNodesResources.model_validate(obj)

        _obj = ComputeNodesResources.model_validate({
            "num_cpus": obj.get("num_cpus"),
            "memory_gb": obj.get("memory_gb"),
            "num_gpus": obj.get("num_gpus"),
            "num_nodes": obj.get("num_nodes"),
            "time_limit": obj.get("time_limit"),
            "scheduler_config_id": obj.get("scheduler_config_id")
        })
        return _obj



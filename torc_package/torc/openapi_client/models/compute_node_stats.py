# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import ConfigDict, BaseModel, Field, StrictInt, StrictStr

class ComputeNodeStats(BaseModel):
    """
    ComputeNodeStats
    """
    resource_type: StrictStr = Field(...)
    average: Dict[str, Any] = Field(...)
    minimum: Dict[str, Any] = Field(...)
    maximum: Dict[str, Any] = Field(...)
    num_samples: StrictInt = Field(...)
    job_key: Optional[StrictStr] = None
    __properties = ["resource_type", "average", "minimum", "maximum", "num_samples", "job_key"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ComputeNodeStats:
        """Create an instance of ComputeNodeStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ComputeNodeStats:
        """Create an instance of ComputeNodeStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ComputeNodeStats.model_validate(obj)

        _obj = ComputeNodeStats.model_validate({
            "resource_type": obj.get("resource_type"),
            "average": obj.get("average"),
            "minimum": obj.get("minimum"),
            "maximum": obj.get("maximum"),
            "num_samples": obj.get("num_samples"),
            "job_key": obj.get("job_key")
        })
        return _obj



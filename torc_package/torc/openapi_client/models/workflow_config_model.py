# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.2.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import ConfigDict, BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from torc.openapi_client.models.compute_node_resource_stats_model import ComputeNodeResourceStatsModel

class WorkflowConfigModel(BaseModel):
    """
    WorkflowConfigModel
    """
    compute_node_resource_stats: Optional[ComputeNodeResourceStatsModel] = None
    compute_node_expiration_buffer_seconds: Optional[Union[StrictFloat, StrictInt]] = None
    compute_node_wait_for_new_jobs_seconds: Optional[Union[StrictFloat, StrictInt]] = None
    compute_node_ignore_workflow_completion: Optional[StrictBool] = False
    compute_node_wait_for_healthy_database_minutes: Optional[Union[StrictFloat, StrictInt]] = None
    key: Optional[StrictStr] = Field(None, alias="_key")
    id: Optional[StrictStr] = Field(None, alias="_id")
    rev: Optional[StrictStr] = Field(None, alias="_rev")
    __properties = ["compute_node_resource_stats", "compute_node_expiration_buffer_seconds", "compute_node_wait_for_new_jobs_seconds", "compute_node_ignore_workflow_completion", "compute_node_wait_for_healthy_database_minutes", "_key", "_id", "_rev"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkflowConfigModel:
        """Create an instance of WorkflowConfigModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of compute_node_resource_stats
        if self.compute_node_resource_stats:
            _dict['compute_node_resource_stats'] = self.compute_node_resource_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkflowConfigModel:
        """Create an instance of WorkflowConfigModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkflowConfigModel.model_validate(obj)

        _obj = WorkflowConfigModel.model_validate({
            "compute_node_resource_stats": ComputeNodeResourceStatsModel.from_dict(obj.get("compute_node_resource_stats")) if obj.get("compute_node_resource_stats") is not None else None,
            "compute_node_expiration_buffer_seconds": obj.get("compute_node_expiration_buffer_seconds"),
            "compute_node_wait_for_new_jobs_seconds": obj.get("compute_node_wait_for_new_jobs_seconds"),
            "compute_node_ignore_workflow_completion": obj.get("compute_node_ignore_workflow_completion") if obj.get("compute_node_ignore_workflow_completion") is not None else False,
            "compute_node_wait_for_healthy_database_minutes": obj.get("compute_node_wait_for_healthy_database_minutes"),
            "key": obj.get("_key"),
            "id": obj.get("_id"),
            "rev": obj.get("_rev")
        })
        return _obj



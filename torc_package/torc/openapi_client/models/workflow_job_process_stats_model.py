# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import ConfigDict, BaseModel, Field, StrictFloat, StrictInt, StrictStr

class WorkflowJobProcessStatsModel(BaseModel):
    """
    WorkflowJobProcessStatsModel
    """
    job_key: StrictStr = Field(...)
    run_id: StrictInt = Field(...)
    avg_cpu_percent: Union[StrictFloat, StrictInt] = Field(...)
    max_cpu_percent: Union[StrictFloat, StrictInt] = Field(...)
    avg_rss: Union[StrictFloat, StrictInt] = Field(...)
    max_rss: Union[StrictFloat, StrictInt] = Field(...)
    num_samples: StrictInt = Field(...)
    timestamp: StrictStr = Field(...)
    key: Optional[StrictStr] = Field(None, alias="_key")
    id: Optional[StrictStr] = Field(None, alias="_id")
    rev: Optional[StrictStr] = Field(None, alias="_rev")
    __properties = ["job_key", "run_id", "avg_cpu_percent", "max_cpu_percent", "avg_rss", "max_rss", "num_samples", "timestamp", "_key", "_id", "_rev"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkflowJobProcessStatsModel:
        """Create an instance of WorkflowJobProcessStatsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkflowJobProcessStatsModel:
        """Create an instance of WorkflowJobProcessStatsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkflowJobProcessStatsModel.model_validate(obj)

        _obj = WorkflowJobProcessStatsModel.model_validate({
            "job_key": obj.get("job_key"),
            "run_id": obj.get("run_id"),
            "avg_cpu_percent": obj.get("avg_cpu_percent"),
            "max_cpu_percent": obj.get("max_cpu_percent"),
            "avg_rss": obj.get("avg_rss"),
            "max_rss": obj.get("max_rss"),
            "num_samples": obj.get("num_samples"),
            "timestamp": obj.get("timestamp"),
            "key": obj.get("_key"),
            "id": obj.get("_id"),
            "rev": obj.get("_rev")
        })
        return _obj



# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.2.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import Field, ConfigDict, BaseModel, StrictStr
from torc.openapi_client.models.workflow_config_model import WorkflowConfigModel
from torc.openapi_client.models.workflow_files_model import WorkflowFilesModel
from torc.openapi_client.models.workflow_job_specifications_model import WorkflowJobSpecificationsModel
from torc.openapi_client.models.workflow_resource_requirements_model import WorkflowResourceRequirementsModel
from torc.openapi_client.models.workflow_specifications_schedulers import WorkflowSpecificationsSchedulers
from torc.openapi_client.models.workflow_user_data_model import WorkflowUserDataModel
from typing_extensions import Annotated

class WorkflowSpecificationsModel(BaseModel):
    """
    WorkflowSpecificationsModel
    """
    name: Optional[StrictStr] = None
    key: Optional[StrictStr] = None
    user: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    jobs: Optional[Annotated[List[WorkflowJobSpecificationsModel], Field()]] = None
    files: Optional[Annotated[List[WorkflowFilesModel], Field()]] = None
    user_data: Optional[Annotated[List[WorkflowUserDataModel], Field()]] = None
    resource_requirements: Optional[Annotated[List[WorkflowResourceRequirementsModel], Field()]] = None
    schedulers: Optional[WorkflowSpecificationsSchedulers] = None
    config: Optional[WorkflowConfigModel] = None
    __properties = ["name", "key", "user", "description", "jobs", "files", "user_data", "resource_requirements", "schedulers", "config"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkflowSpecificationsModel:
        """Create an instance of WorkflowSpecificationsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in jobs (list)
        _items = []
        if self.jobs:
            for _item in self.jobs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['jobs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_data (list)
        _items = []
        if self.user_data:
            for _item in self.user_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['user_data'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resource_requirements (list)
        _items = []
        if self.resource_requirements:
            for _item in self.resource_requirements:
                if _item:
                    _items.append(_item.to_dict())
            _dict['resource_requirements'] = _items
        # override the default output from pydantic by calling `to_dict()` of schedulers
        if self.schedulers:
            _dict['schedulers'] = self.schedulers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkflowSpecificationsModel:
        """Create an instance of WorkflowSpecificationsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkflowSpecificationsModel.model_validate(obj)

        _obj = WorkflowSpecificationsModel.model_validate({
            "name": obj.get("name"),
            "key": obj.get("key"),
            "user": obj.get("user"),
            "description": obj.get("description"),
            "jobs": [WorkflowJobSpecificationsModel.from_dict(_item) for _item in obj.get("jobs")] if obj.get("jobs") is not None else None,
            "files": [WorkflowFilesModel.from_dict(_item) for _item in obj.get("files")] if obj.get("files") is not None else None,
            "user_data": [WorkflowUserDataModel.from_dict(_item) for _item in obj.get("user_data")] if obj.get("user_data") is not None else None,
            "resource_requirements": [WorkflowResourceRequirementsModel.from_dict(_item) for _item in obj.get("resource_requirements")] if obj.get("resource_requirements") is not None else None,
            "schedulers": WorkflowSpecificationsSchedulers.from_dict(obj.get("schedulers")) if obj.get("schedulers") is not None else None,
            "config": WorkflowConfigModel.from_dict(obj.get("config")) if obj.get("config") is not None else None
        })
        return _obj



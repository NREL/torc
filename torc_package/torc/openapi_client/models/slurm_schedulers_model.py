# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.2.8
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import ConfigDict, BaseModel, Field, StrictInt, StrictStr

class SlurmSchedulersModel(BaseModel):
    """
    SlurmSchedulersModel
    """
    name: Optional[StrictStr] = None
    account: StrictStr = Field(...)
    gres: Optional[StrictStr] = None
    mem: Optional[StrictStr] = None
    nodes: StrictInt = Field(...)
    ntasks_per_node: Optional[StrictInt] = None
    partition: Optional[StrictStr] = None
    qos: Optional[StrictStr] = 'normal'
    tmp: Optional[StrictStr] = None
    walltime: Optional[StrictStr] = None
    extra: Optional[StrictStr] = None
    key: Optional[StrictStr] = Field(None, alias="_key")
    id: Optional[StrictStr] = Field(None, alias="_id")
    rev: Optional[StrictStr] = Field(None, alias="_rev")
    __properties = ["name", "account", "gres", "mem", "nodes", "ntasks_per_node", "partition", "qos", "tmp", "walltime", "extra", "_key", "_id", "_rev"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SlurmSchedulersModel:
        """Create an instance of SlurmSchedulersModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SlurmSchedulersModel:
        """Create an instance of SlurmSchedulersModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SlurmSchedulersModel.model_validate(obj)

        _obj = SlurmSchedulersModel.model_validate({
            "name": obj.get("name"),
            "account": obj.get("account"),
            "gres": obj.get("gres"),
            "mem": obj.get("mem"),
            "nodes": obj.get("nodes"),
            "ntasks_per_node": obj.get("ntasks_per_node"),
            "partition": obj.get("partition"),
            "qos": obj.get("qos") if obj.get("qos") is not None else 'normal',
            "tmp": obj.get("tmp"),
            "walltime": obj.get("walltime"),
            "extra": obj.get("extra"),
            "key": obj.get("_key"),
            "id": obj.get("_id"),
            "rev": obj.get("_rev")
        })
        return _obj



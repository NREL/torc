# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.2.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import ConfigDict, BaseModel, Field, StrictStr

class ScheduledComputeNodesModel(BaseModel):
    """
    ScheduledComputeNodesModel
    """
    scheduler_id: Optional[StrictStr] = None
    scheduler_config_id: StrictStr = Field(...)
    status: StrictStr = Field(...)
    key: Optional[StrictStr] = Field(None, alias="_key")
    id: Optional[StrictStr] = Field(None, alias="_id")
    rev: Optional[StrictStr] = Field(None, alias="_rev")
    __properties = ["scheduler_id", "scheduler_config_id", "status", "_key", "_id", "_rev"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScheduledComputeNodesModel:
        """Create an instance of ScheduledComputeNodesModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScheduledComputeNodesModel:
        """Create an instance of ScheduledComputeNodesModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScheduledComputeNodesModel.model_validate(obj)

        _obj = ScheduledComputeNodesModel.model_validate({
            "scheduler_id": obj.get("scheduler_id"),
            "scheduler_config_id": obj.get("scheduler_config_id"),
            "status": obj.get("status"),
            "key": obj.get("_key"),
            "id": obj.get("_id"),
            "rev": obj.get("_rev")
        })
        return _obj



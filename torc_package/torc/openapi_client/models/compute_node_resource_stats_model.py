# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1.13
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import ConfigDict, BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr

class ComputeNodeResourceStatsModel(BaseModel):
    """
    ComputeNodeResourceStatsModel
    """
    cpu: Optional[StrictBool] = True
    disk: Optional[StrictBool] = False
    memory: Optional[StrictBool] = True
    network: Optional[StrictBool] = False
    process: Optional[StrictBool] = False
    include_child_processes: Optional[StrictBool] = True
    recurse_child_processes: Optional[StrictBool] = False
    monitor_type: Optional[StrictStr] = 'aggregation'
    make_plots: Optional[StrictBool] = True
    interval: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["cpu", "disk", "memory", "network", "process", "include_child_processes", "recurse_child_processes", "monitor_type", "make_plots", "interval"]
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ComputeNodeResourceStatsModel:
        """Create an instance of ComputeNodeResourceStatsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ComputeNodeResourceStatsModel:
        """Create an instance of ComputeNodeResourceStatsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ComputeNodeResourceStatsModel.model_validate(obj)

        _obj = ComputeNodeResourceStatsModel.model_validate({
            "cpu": obj.get("cpu") if obj.get("cpu") is not None else True,
            "disk": obj.get("disk") if obj.get("disk") is not None else False,
            "memory": obj.get("memory") if obj.get("memory") is not None else True,
            "network": obj.get("network") if obj.get("network") is not None else False,
            "process": obj.get("process") if obj.get("process") is not None else False,
            "include_child_processes": obj.get("include_child_processes") if obj.get("include_child_processes") is not None else True,
            "recurse_child_processes": obj.get("recurse_child_processes") if obj.get("recurse_child_processes") is not None else False,
            "monitor_type": obj.get("monitor_type") if obj.get("monitor_type") is not None else 'aggregation',
            "make_plots": obj.get("make_plots") if obj.get("make_plots") is not None else True,
            "interval": obj.get("interval")
        })
        return _obj



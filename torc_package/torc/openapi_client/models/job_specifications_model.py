# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.2.8
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class JobSpecificationsModel(BaseModel):
    """
    JobSpecificationsModel
    """
    name: Optional[StrictStr] = None
    key: Optional[StrictStr] = None
    command: StrictStr
    invocation_script: Optional[StrictStr] = None
    cancel_on_blocking_job_failure: Optional[StrictBool] = True
    supports_termination: Optional[StrictBool] = False
    scheduler: Optional[StrictStr] = None
    needs_compute_node_schedule: Optional[StrictBool] = False
    input_user_data: Optional[List[StrictStr]] = None
    output_user_data: Optional[List[StrictStr]] = None
    resource_requirements: Optional[StrictStr] = None
    input_files: Optional[List[StrictStr]] = None
    output_files: Optional[List[StrictStr]] = None
    blocked_by: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["name", "key", "command", "invocation_script", "cancel_on_blocking_job_failure", "supports_termination", "scheduler", "needs_compute_node_schedule", "input_user_data", "output_user_data", "resource_requirements", "input_files", "output_files", "blocked_by"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JobSpecificationsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of JobSpecificationsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "key": obj.get("key"),
            "command": obj.get("command"),
            "invocation_script": obj.get("invocation_script"),
            "cancel_on_blocking_job_failure": obj.get("cancel_on_blocking_job_failure") if obj.get("cancel_on_blocking_job_failure") is not None else True,
            "supports_termination": obj.get("supports_termination") if obj.get("supports_termination") is not None else False,
            "scheduler": obj.get("scheduler"),
            "needs_compute_node_schedule": obj.get("needs_compute_node_schedule") if obj.get("needs_compute_node_schedule") is not None else False,
            "input_user_data": obj.get("input_user_data"),
            "output_user_data": obj.get("output_user_data"),
            "resource_requirements": obj.get("resource_requirements"),
            "input_files": obj.get("input_files"),
            "output_files": obj.get("output_files"),
            "blocked_by": obj.get("blocked_by")
        })
        return _obj



# coding: utf-8

"""
    torc

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class JobsInternal(BaseModel):
    """
    JobsInternal
    """ # noqa: E501
    memory_bytes: Optional[StrictInt] = None
    num_cpus: Optional[StrictInt] = None
    num_gpus: Optional[StrictInt] = None
    num_nodes: Optional[StrictInt] = None
    runtime_seconds: Optional[Union[StrictFloat, StrictInt]] = None
    scheduler_config_id: Optional[StrictStr] = None
    hash: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["memory_bytes", "num_cpus", "num_gpus", "num_nodes", "runtime_seconds", "scheduler_config_id", "hash"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JobsInternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of JobsInternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "memory_bytes": obj.get("memory_bytes"),
            "num_cpus": obj.get("num_cpus"),
            "num_gpus": obj.get("num_gpus"),
            "num_nodes": obj.get("num_nodes"),
            "runtime_seconds": obj.get("runtime_seconds"),
            "scheduler_config_id": obj.get("scheduler_config_id"),
            "hash": obj.get("hash")
        })
        return _obj



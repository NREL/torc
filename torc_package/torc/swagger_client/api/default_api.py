# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from torc.swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_workflows_key(self, key, **kwargs):  # noqa: E501
        """Delete a workflow  # noqa: E501

        Deletes a document from the \"workflows\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_key(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key. (required)
        :param object body:
        :return: WorkflowsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_key_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_key_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_key_with_http_info(self, key, **kwargs):  # noqa: E501
        """Delete a workflow  # noqa: E501

        Deletes a document from the \"workflows\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_key_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key. (required)
        :param object body:
        :return: WorkflowsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowsKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_aws_schedulers(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type AWS compute node configuration for a workflow  # noqa: E501

        Delete all documents from the \"aws_schedulers\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_aws_schedulers(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_aws_schedulers_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_aws_schedulers_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_aws_schedulers_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type AWS compute node configuration for a workflow  # noqa: E501

        Delete all documents from the \"aws_schedulers\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_aws_schedulers_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_aws_schedulers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_aws_schedulers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/aws_schedulers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_aws_schedulers_key(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type AWS compute node configuration  # noqa: E501

        Deletes a document from the \"aws_schedulers\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_aws_schedulers_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: AwsSchedulersKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_aws_schedulers_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_aws_schedulers_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_aws_schedulers_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type AWS compute node configuration  # noqa: E501

        Deletes a document from the \"aws_schedulers\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_aws_schedulers_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: AwsSchedulersKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_aws_schedulers_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_aws_schedulers_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_aws_schedulers_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/aws_schedulers/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsSchedulersKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_compute_node_stats(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type compute node statistics for a workflow  # noqa: E501

        Delete all documents from the \"compute_node_stats\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_compute_node_stats(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_compute_node_stats_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_compute_node_stats_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_compute_node_stats_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type compute node statistics for a workflow  # noqa: E501

        Delete all documents from the \"compute_node_stats\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_compute_node_stats_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_compute_node_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_compute_node_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/compute_node_stats', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_compute_node_stats_key(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type compute node statistics  # noqa: E501

        Deletes a document from the \"compute_node_stats\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_compute_node_stats_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_compute_node_stats_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_compute_node_stats_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_compute_node_stats_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type compute node statistics  # noqa: E501

        Deletes a document from the \"compute_node_stats\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_compute_node_stats_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_compute_node_stats_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_compute_node_stats_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_compute_node_stats_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/compute_node_stats/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_compute_nodes(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type compute node for a workflow  # noqa: E501

        Delete all documents from the \"compute_nodes\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_compute_nodes(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_compute_nodes_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_compute_nodes_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_compute_nodes_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type compute node for a workflow  # noqa: E501

        Delete all documents from the \"compute_nodes\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_compute_nodes_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_compute_nodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_compute_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/compute_nodes', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_compute_nodes_key(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type compute node  # noqa: E501

        Deletes a document from the \"compute_nodes\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_compute_nodes_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_compute_nodes_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_compute_nodes_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_compute_nodes_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type compute node  # noqa: E501

        Deletes a document from the \"compute_nodes\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_compute_nodes_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_compute_nodes_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_compute_nodes_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_compute_nodes_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/compute_nodes/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_edges_name(self, workflow, name, **kwargs):  # noqa: E501
        """Delete all edges from the designated collection  # noqa: E501

        Deletes all edges from the designated collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_edges_name(workflow, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str name: Edge collection name (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_edges_name_with_http_info(workflow, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_edges_name_with_http_info(workflow, name, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_edges_name_with_http_info(self, workflow, name, **kwargs):  # noqa: E501
        """Delete all edges from the designated collection  # noqa: E501

        Deletes all edges from the designated collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_edges_name_with_http_info(workflow, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str name: Edge collection name (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_edges_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_edges_name`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_workflows_workflow_edges_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/edges/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_edges_name_key(self, workflow, name, key, **kwargs):  # noqa: E501
        """Delete an edge  # noqa: E501

        Deletes an edge from the designated collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_edges_name_key(workflow, name, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str name: Edge name. (required)
        :param str key: Edge key. (required)
        :param object body:
        :return: EdgesNameModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_edges_name_key_with_http_info(workflow, name, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_edges_name_key_with_http_info(workflow, name, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_edges_name_key_with_http_info(self, workflow, name, key, **kwargs):  # noqa: E501
        """Delete an edge  # noqa: E501

        Deletes an edge from the designated collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_edges_name_key_with_http_info(workflow, name, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str name: Edge name. (required)
        :param str key: Edge key. (required)
        :param object body:
        :return: EdgesNameModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'name', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_edges_name_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_edges_name_key`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_workflows_workflow_edges_name_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_edges_name_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/edges/{name}/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgesNameModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_events(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type event for a workflow  # noqa: E501

        Delete all documents from the \"events\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_events(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_events_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_events_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_events_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type event for a workflow  # noqa: E501

        Delete all documents from the \"events\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_events_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/events', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_events_key(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type event  # noqa: E501

        Deletes a document from the \"events\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_events_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_events_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_events_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_events_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type event  # noqa: E501

        Deletes a document from the \"events\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_events_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_events_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_events_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_events_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/events/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_files(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type file for a workflow  # noqa: E501

        Delete all documents from the \"files\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_files(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_files_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_files_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_files_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type file for a workflow  # noqa: E501

        Delete all documents from the \"files\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_files_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/files', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_files_key(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type file  # noqa: E501

        Deletes a document from the \"files\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_files_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: FilesKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_files_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_files_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_files_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type file  # noqa: E501

        Deletes a document from the \"files\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_files_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: FilesKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_files_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_files_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_files_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/files/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FilesKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_job_process_stats(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type job process statistics for a workflow  # noqa: E501

        Delete all documents from the \"job_process_stats\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_job_process_stats(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_job_process_stats_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_job_process_stats_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_job_process_stats_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type job process statistics for a workflow  # noqa: E501

        Delete all documents from the \"job_process_stats\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_job_process_stats_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_job_process_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_job_process_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/job_process_stats', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_job_process_stats_key(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type job process statistics  # noqa: E501

        Deletes a document from the \"job_process_stats\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_job_process_stats_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: JobProcessStatsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_job_process_stats_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_job_process_stats_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_job_process_stats_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type job process statistics  # noqa: E501

        Deletes a document from the \"job_process_stats\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_job_process_stats_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: JobProcessStatsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_job_process_stats_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_job_process_stats_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_job_process_stats_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/job_process_stats/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobProcessStatsKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_jobs(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type job for a workflow  # noqa: E501

        Delete all documents from the \"jobs\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_jobs(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_jobs_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_jobs_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_jobs_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type job for a workflow  # noqa: E501

        Delete all documents from the \"jobs\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_jobs_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_jobs_key(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type job  # noqa: E501

        Deletes a document from the \"jobs\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_jobs_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_jobs_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_jobs_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_jobs_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type job  # noqa: E501

        Deletes a document from the \"jobs\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_jobs_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_jobs_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_jobs_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_jobs_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_local_schedulers(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type local compute node configuration for a workflow  # noqa: E501

        Delete all documents from the \"local_schedulers\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_local_schedulers(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_local_schedulers_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_local_schedulers_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_local_schedulers_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type local compute node configuration for a workflow  # noqa: E501

        Delete all documents from the \"local_schedulers\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_local_schedulers_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_local_schedulers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_local_schedulers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/local_schedulers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_local_schedulers_key(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type local compute node configuration  # noqa: E501

        Deletes a document from the \"local_schedulers\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_local_schedulers_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: LocalSchedulersKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_local_schedulers_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_local_schedulers_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_local_schedulers_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type local compute node configuration  # noqa: E501

        Deletes a document from the \"local_schedulers\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_local_schedulers_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: LocalSchedulersKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_local_schedulers_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_local_schedulers_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_local_schedulers_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/local_schedulers/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocalSchedulersKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_resource_requirements(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type resource requirements for a workflow  # noqa: E501

        Delete all documents from the \"resource_requirements\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_resource_requirements(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_resource_requirements_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_resource_requirements_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_resource_requirements_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type resource requirements for a workflow  # noqa: E501

        Delete all documents from the \"resource_requirements\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_resource_requirements_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_resource_requirements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_resource_requirements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/resource_requirements', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_resource_requirements_key(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type resource requirements  # noqa: E501

        Deletes a document from the \"resource_requirements\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_resource_requirements_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: ResourceRequirementsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_resource_requirements_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_resource_requirements_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_resource_requirements_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type resource requirements  # noqa: E501

        Deletes a document from the \"resource_requirements\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_resource_requirements_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: ResourceRequirementsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_resource_requirements_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_resource_requirements_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_resource_requirements_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/resource_requirements/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceRequirementsKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_results(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type result for a workflow  # noqa: E501

        Delete all documents from the \"results\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_results(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_results_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_results_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_results_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type result for a workflow  # noqa: E501

        Delete all documents from the \"results\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_results_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/results', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_results_key(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type result  # noqa: E501

        Deletes a document from the \"results\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_results_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: ResultsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_results_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_results_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_results_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type result  # noqa: E501

        Deletes a document from the \"results\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_results_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: ResultsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_results_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_results_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_results_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/results/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultsKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_scheduled_compute_nodes(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type scheduled compute node for a workflow  # noqa: E501

        Delete all documents from the \"scheduled_compute_nodes\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_scheduled_compute_nodes(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_scheduled_compute_nodes_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_scheduled_compute_nodes_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_scheduled_compute_nodes_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type scheduled compute node for a workflow  # noqa: E501

        Delete all documents from the \"scheduled_compute_nodes\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_scheduled_compute_nodes_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_scheduled_compute_nodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_scheduled_compute_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/scheduled_compute_nodes', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_scheduled_compute_nodes_key(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type scheduled compute node  # noqa: E501

        Deletes a document from the \"scheduled_compute_nodes\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_scheduled_compute_nodes_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: ScheduledComputeNodesKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_scheduled_compute_nodes_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_scheduled_compute_nodes_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_scheduled_compute_nodes_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type scheduled compute node  # noqa: E501

        Deletes a document from the \"scheduled_compute_nodes\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_scheduled_compute_nodes_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: ScheduledComputeNodesKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_scheduled_compute_nodes_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_scheduled_compute_nodes_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_scheduled_compute_nodes_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/scheduled_compute_nodes/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduledComputeNodesKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_slurm_schedulers(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type Slurm compute node configuration for a workflow  # noqa: E501

        Delete all documents from the \"slurm_schedulers\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_slurm_schedulers(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_slurm_schedulers_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_slurm_schedulers_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_slurm_schedulers_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type Slurm compute node configuration for a workflow  # noqa: E501

        Delete all documents from the \"slurm_schedulers\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_slurm_schedulers_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_slurm_schedulers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_slurm_schedulers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/slurm_schedulers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_slurm_schedulers_key(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type Slurm compute node configuration  # noqa: E501

        Deletes a document from the \"slurm_schedulers\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_slurm_schedulers_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: SlurmSchedulersKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_slurm_schedulers_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_slurm_schedulers_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_slurm_schedulers_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type Slurm compute node configuration  # noqa: E501

        Deletes a document from the \"slurm_schedulers\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_slurm_schedulers_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: SlurmSchedulersKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_slurm_schedulers_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_slurm_schedulers_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_slurm_schedulers_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/slurm_schedulers/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SlurmSchedulersKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_user_data(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type user data for a workflow  # noqa: E501

        Delete all documents from the \"user_data\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_user_data(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_user_data_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_user_data_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_user_data_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Delete all documents of type user data for a workflow  # noqa: E501

        Delete all documents from the \"user_data\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_user_data_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_user_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_user_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/user_data', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_workflows_workflow_user_data_key(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type user data  # noqa: E501

        Deletes a document from the \"user_data\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_user_data_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: UserDataKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_workflows_workflow_user_data_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workflows_workflow_user_data_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def delete_workflows_workflow_user_data_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Delete a document of type user data  # noqa: E501

        Deletes a document from the \"user_data\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflows_workflow_user_data_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the {{name}} document. (required)
        :param object body:
        :return: UserDataKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflows_workflow_user_data_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `delete_workflows_workflow_user_data_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_workflows_workflow_user_data_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/user_data/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserDataKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_config(self, **kwargs):  # noqa: E501
        """Retrieve the current workflow config.  # noqa: E501

        Retrieve the current workflow config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflow_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_workflow_config_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the current workflow config.  # noqa: E501

        Retrieve the current workflow config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflow_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflow_config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_specifications_example(self, **kwargs):  # noqa: E501
        """Retrieve an example workflow specification  # noqa: E501

        Retrieves an example workflow specification in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflow_specifications_example(async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_specifications_example_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_specifications_example_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_workflow_specifications_example_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve an example workflow specification  # noqa: E501

        Retrieves an example workflow specification in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflow_specifications_example_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_specifications_example" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflow_specifications/example', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_specifications_key(self, key, **kwargs):  # noqa: E501
        """Retrieve the current workflow  # noqa: E501

        Retrieves the current workflow in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflow_specifications_key(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: key of the workflow. (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_specifications_key_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_specifications_key_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_workflow_specifications_key_with_http_info(self, key, **kwargs):  # noqa: E501
        """Retrieve the current workflow  # noqa: E501

        Retrieves the current workflow in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflow_specifications_key_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: key of the workflow. (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_specifications_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflow_specifications_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflow_specifications/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflow_specifications_template(self, **kwargs):  # noqa: E501
        """Retrieve the workflow specification template  # noqa: E501

        Retrieve the workflow specification template in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflow_specifications_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflow_specifications_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_workflow_specifications_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_workflow_specifications_template_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the workflow specification template  # noqa: E501

        Retrieve the workflow specification template in JSON format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflow_specifications_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflow_specifications_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflow_specifications/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows(self, **kwargs):  # noqa: E501
        """Retrieve all workflows  # noqa: E501

        Retrieves all documents from the \"workflows\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows(async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param float skip:
        :param float limit:
        :param str name:
        :param str user:
        :param str description:
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_workflows_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all workflows  # noqa: E501

        Retrieves all documents from the \"workflows\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param float skip:
        :param float limit:
        :param str name:
        :param str user:
        :param str description:
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skip', 'limit', 'name', 'user', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_key(self, key, **kwargs):  # noqa: E501
        """Retrieve the workflow for an key.  # noqa: E501

        Retrieve the document for a key from the \"workflows\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: key of the workflows document (required)
        :return: WorkflowsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_key_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_key_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_workflows_key_with_http_info(self, key, **kwargs):  # noqa: E501
        """Retrieve the workflow for an key.  # noqa: E501

        Retrieve the document for a key from the \"workflows\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: key of the workflows document (required)
        :return: WorkflowsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_key_collection_names(self, key, **kwargs):  # noqa: E501
        """Retrieve all collection names for one workflow.  # noqa: E501

        Retrieve all collection names for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_collection_names(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_key_collection_names_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_key_collection_names_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_workflows_key_collection_names_with_http_info(self, key, **kwargs):  # noqa: E501
        """Retrieve all collection names for one workflow.  # noqa: E501

        Retrieve all collection names for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_collection_names_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_key_collection_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_key_collection_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/collection_names', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20031',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_key_config(self, key, **kwargs):  # noqa: E501
        """Reports the workflow config.  # noqa: E501

        Reports the workflow config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_config(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_key_config_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_key_config_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_workflows_key_config_with_http_info(self, key, **kwargs):  # noqa: E501
        """Reports the workflow config.  # noqa: E501

        Reports the workflow config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_config_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_key_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_key_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_key_dot_graph_name(self, key, name, **kwargs):  # noqa: E501
        """Build a string for a DOT graph.  # noqa: E501

        Build a string for a DOT graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_dot_graph_name(key, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :param str name: Graph name (required)
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_key_dot_graph_name_with_http_info(key, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_key_dot_graph_name_with_http_info(key, name, **kwargs)  # noqa: E501
            return data

    def get_workflows_key_dot_graph_name_with_http_info(self, key, name, **kwargs):  # noqa: E501
        """Build a string for a DOT graph.  # noqa: E501

        Build a string for a DOT graph.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_dot_graph_name_with_http_info(key, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :param str name: Graph name (required)
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_key_dot_graph_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_key_dot_graph_name`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_workflows_key_dot_graph_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/dot_graph/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20032',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_key_is_complete(self, key, **kwargs):  # noqa: E501
        """Report whether the workflow is complete  # noqa: E501

        Reports true if all jobs in the workflow are complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_is_complete(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_key_is_complete_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_key_is_complete_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_workflows_key_is_complete_with_http_info(self, key, **kwargs):  # noqa: E501
        """Report whether the workflow is complete  # noqa: E501

        Reports true if all jobs in the workflow are complete.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_is_complete_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_key_is_complete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_key_is_complete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/is_complete', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_key_missing_user_data(self, key, **kwargs):  # noqa: E501
        """List missing user data that should exist.  # noqa: E501

        List missing user data that should exist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_missing_user_data(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_key_missing_user_data_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_key_missing_user_data_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_workflows_key_missing_user_data_with_http_info(self, key, **kwargs):  # noqa: E501
        """List missing user data that should exist.  # noqa: E501

        List missing user data that should exist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_missing_user_data_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_key_missing_user_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_key_missing_user_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/missing_user_data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20025',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_key_ready_job_requirements(self, key, **kwargs):  # noqa: E501
        """Return the resource requirements for ready jobs.  # noqa: E501

        Return the resource requirements for jobs with a status of ready.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_ready_job_requirements(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :param str scheduler_config_id: Limit output to jobs assigned this scheduler.
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_key_ready_job_requirements_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_key_ready_job_requirements_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_workflows_key_ready_job_requirements_with_http_info(self, key, **kwargs):  # noqa: E501
        """Return the resource requirements for ready jobs.  # noqa: E501

        Return the resource requirements for jobs with a status of ready.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_ready_job_requirements_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :param str scheduler_config_id: Limit output to jobs assigned this scheduler.
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'scheduler_config_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_key_ready_job_requirements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_key_ready_job_requirements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'scheduler_config_id' in params:
            query_params.append(('scheduler_config_id', params['scheduler_config_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/ready_job_requirements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20023',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_key_required_existing_files(self, key, **kwargs):  # noqa: E501
        """List files that must exist.  # noqa: E501

        List files that must exist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_required_existing_files(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_key_required_existing_files_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_key_required_existing_files_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_workflows_key_required_existing_files_with_http_info(self, key, **kwargs):  # noqa: E501
        """List files that must exist.  # noqa: E501

        List files that must exist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_required_existing_files_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_key_required_existing_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_key_required_existing_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/required_existing_files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_key_status(self, key, **kwargs):  # noqa: E501
        """Reports the workflow status.  # noqa: E501

        Reports the workflow status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_status(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_key_status_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_key_status_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def get_workflows_key_status_with_http_info(self, key, **kwargs):  # noqa: E501
        """Reports the workflow status.  # noqa: E501

        Reports the workflow status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_key_status_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_key_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_key_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_aws_schedulers(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all AWS compute node configuration documents  # noqa: E501

        Retrieve all documents from the \"aws_schedulers\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_aws_schedulers(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str name:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_aws_schedulers_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_aws_schedulers_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_aws_schedulers_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all AWS compute node configuration documents  # noqa: E501

        Retrieve all documents from the \"aws_schedulers\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_aws_schedulers_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str name:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit', 'sort_by', 'reverse_sort', 'key', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_aws_schedulers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_aws_schedulers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'reverse_sort' in params:
            query_params.append(('reverse_sort', params['reverse_sort']))  # noqa: E501
        if 'key' in params:
            query_params.append(('_key', params['key']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/aws_schedulers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_aws_schedulers_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the AWS compute node configuration for a key.  # noqa: E501

        Retrieve the document from the \"aws_schedulers\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_aws_schedulers_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the aws_schedulers document (required)
        :return: WorkflowAwsSchedulersModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_aws_schedulers_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_aws_schedulers_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_aws_schedulers_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the AWS compute node configuration for a key.  # noqa: E501

        Retrieve the document from the \"aws_schedulers\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_aws_schedulers_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the aws_schedulers document (required)
        :return: WorkflowAwsSchedulersModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_aws_schedulers_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_aws_schedulers_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_aws_schedulers_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/aws_schedulers/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowAwsSchedulersModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_compute_node_stats(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all compute node statistics documents  # noqa: E501

        Retrieve all documents from the \"compute_node_stats\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_compute_node_stats(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str hostname:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_compute_node_stats_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_compute_node_stats_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_compute_node_stats_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all compute node statistics documents  # noqa: E501

        Retrieve all documents from the \"compute_node_stats\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_compute_node_stats_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str hostname:
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit', 'sort_by', 'reverse_sort', 'key', 'hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_compute_node_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_compute_node_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'reverse_sort' in params:
            query_params.append(('reverse_sort', params['reverse_sort']))  # noqa: E501
        if 'key' in params:
            query_params.append(('_key', params['key']))  # noqa: E501
        if 'hostname' in params:
            query_params.append(('hostname', params['hostname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/compute_node_stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_compute_node_stats_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the compute node statistics for a key.  # noqa: E501

        Retrieve the document from the \"compute_node_stats\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_compute_node_stats_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the compute_node_stats document (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_compute_node_stats_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_compute_node_stats_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_compute_node_stats_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the compute node statistics for a key.  # noqa: E501

        Retrieve the document from the \"compute_node_stats\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_compute_node_stats_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the compute_node_stats document (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_compute_node_stats_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_compute_node_stats_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_compute_node_stats_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/compute_node_stats/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_compute_nodes(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all compute node documents  # noqa: E501

        Retrieve all documents from the \"compute_nodes\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_compute_nodes(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str hostname:
        :param bool is_active:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_compute_nodes_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_compute_nodes_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_compute_nodes_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all compute node documents  # noqa: E501

        Retrieve all documents from the \"compute_nodes\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_compute_nodes_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str hostname:
        :param bool is_active:
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit', 'sort_by', 'reverse_sort', 'key', 'hostname', 'is_active']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_compute_nodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_compute_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'reverse_sort' in params:
            query_params.append(('reverse_sort', params['reverse_sort']))  # noqa: E501
        if 'key' in params:
            query_params.append(('_key', params['key']))  # noqa: E501
        if 'hostname' in params:
            query_params.append(('hostname', params['hostname']))  # noqa: E501
        if 'is_active' in params:
            query_params.append(('is_active', params['is_active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/compute_nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_compute_nodes_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the compute node for a key.  # noqa: E501

        Retrieve the document from the \"compute_nodes\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_compute_nodes_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the compute_nodes document (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_compute_nodes_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_compute_nodes_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_compute_nodes_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the compute node for a key.  # noqa: E501

        Retrieve the document from the \"compute_nodes\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_compute_nodes_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the compute_nodes document (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_compute_nodes_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_compute_nodes_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_compute_nodes_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/compute_nodes/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_edges_name(self, workflow, name, **kwargs):  # noqa: E501
        """Retrieve all edges from the designated collection.  # noqa: E501

        Retrieve all edges from the designated collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_edges_name(workflow, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str name: Edge collection name (required)
        :param float skip:
        :param float limit:
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_edges_name_with_http_info(workflow, name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_edges_name_with_http_info(workflow, name, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_edges_name_with_http_info(self, workflow, name, **kwargs):  # noqa: E501
        """Retrieve all edges from the designated collection.  # noqa: E501

        Retrieve all edges from the designated collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_edges_name_with_http_info(workflow, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str name: Edge collection name (required)
        :param float skip:
        :param float limit:
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'name', 'skip', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_edges_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_edges_name`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_workflows_workflow_edges_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/edges/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_edges_name_key(self, workflow, name, key, **kwargs):  # noqa: E501
        """Retrieve an edge  # noqa: E501

        Retrieves an edge from the designated collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_edges_name_key(workflow, name, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str name: Edge collection name (required)
        :param str key: Edge key (required)
        :return: EdgesNameModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_edges_name_key_with_http_info(workflow, name, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_edges_name_key_with_http_info(workflow, name, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_edges_name_key_with_http_info(self, workflow, name, key, **kwargs):  # noqa: E501
        """Retrieve an edge  # noqa: E501

        Retrieves an edge from the designated collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_edges_name_key_with_http_info(workflow, name, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str name: Edge collection name (required)
        :param str key: Edge key (required)
        :return: EdgesNameModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'name', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_edges_name_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_edges_name_key`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_workflows_workflow_edges_name_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_edges_name_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/edges/{name}/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgesNameModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_events(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all event documents  # noqa: E501

        Retrieve all documents from the \"events\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_events(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str category:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_events_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_events_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_events_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all event documents  # noqa: E501

        Retrieve all documents from the \"events\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_events_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str category:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit', 'sort_by', 'reverse_sort', 'key', 'category']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'reverse_sort' in params:
            query_params.append(('reverse_sort', params['reverse_sort']))  # noqa: E501
        if 'key' in params:
            query_params.append(('_key', params['key']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_events_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the event for a key.  # noqa: E501

        Retrieve the document from the \"events\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_events_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the events document (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_events_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_events_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_events_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the event for a key.  # noqa: E501

        Retrieve the document from the \"events\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_events_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the events document (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_events_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_events_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_events_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/events/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_files(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all file documents  # noqa: E501

        Retrieve all documents from the \"files\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_files(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str name:
        :param str path:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_files_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_files_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_files_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all file documents  # noqa: E501

        Retrieve all documents from the \"files\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_files_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str name:
        :param str path:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit', 'sort_by', 'reverse_sort', 'key', 'name', 'path']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'reverse_sort' in params:
            query_params.append(('reverse_sort', params['reverse_sort']))  # noqa: E501
        if 'key' in params:
            query_params.append(('_key', params['key']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_files_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the file for a key.  # noqa: E501

        Retrieve the document from the \"files\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_files_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the files document (required)
        :return: WorkflowFilesModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_files_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_files_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_files_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the file for a key.  # noqa: E501

        Retrieve the document from the \"files\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_files_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the files document (required)
        :return: WorkflowFilesModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_files_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_files_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_files_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/files/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowFilesModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_files_produced_by_job_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve files produced by a job  # noqa: E501

        Retrieves files from the \"files\" collection produced by a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_files_produced_by_job_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :param float skip:
        :param float limit:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_files_produced_by_job_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_files_produced_by_job_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_files_produced_by_job_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve files produced by a job  # noqa: E501

        Retrieves files from the \"files\" collection produced by a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_files_produced_by_job_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :param float skip:
        :param float limit:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'skip', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_files_produced_by_job_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_files_produced_by_job_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_files_produced_by_job_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/files/produced_by_job/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_job_keys(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all job keys for a workflow.  # noqa: E501

        Retrieves all job keys from the \"jobs\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_job_keys(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_job_keys_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_job_keys_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_job_keys_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all job keys for a workflow.  # noqa: E501

        Retrieves all job keys from the \"jobs\" collection for a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_job_keys_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_job_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_job_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/job_keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_job_process_stats(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all job process statistics documents  # noqa: E501

        Retrieve all documents from the \"job_process_stats\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_job_process_stats(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str job_key:
        :param int run_id:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_job_process_stats_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_job_process_stats_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_job_process_stats_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all job process statistics documents  # noqa: E501

        Retrieve all documents from the \"job_process_stats\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_job_process_stats_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str job_key:
        :param int run_id:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit', 'sort_by', 'reverse_sort', 'key', 'job_key', 'run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_job_process_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_job_process_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'reverse_sort' in params:
            query_params.append(('reverse_sort', params['reverse_sort']))  # noqa: E501
        if 'key' in params:
            query_params.append(('_key', params['key']))  # noqa: E501
        if 'job_key' in params:
            query_params.append(('job_key', params['job_key']))  # noqa: E501
        if 'run_id' in params:
            query_params.append(('run_id', params['run_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/job_process_stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_job_process_stats_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the job process statistics for a key.  # noqa: E501

        Retrieve the document from the \"job_process_stats\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_job_process_stats_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the job_process_stats document (required)
        :return: WorkflowJobProcessStatsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_job_process_stats_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_job_process_stats_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_job_process_stats_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the job process statistics for a key.  # noqa: E501

        Retrieve the document from the \"job_process_stats\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_job_process_stats_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the job_process_stats document (required)
        :return: WorkflowJobProcessStatsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_job_process_stats_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_job_process_stats_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_job_process_stats_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/job_process_stats/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowJobProcessStatsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_job_specifications(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all job definitions  # noqa: E501

        Retrieves all job definitions. Limit output with skip and limit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_job_specifications(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_job_specifications_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_job_specifications_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_job_specifications_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all job definitions  # noqa: E501

        Retrieves all job definitions. Limit output with skip and limit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_job_specifications_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_job_specifications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_job_specifications`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/job_specifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_job_specifications_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve a job  # noqa: E501

        Retrieves a job from the \"jobs\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_job_specifications_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_job_specifications_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_job_specifications_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_job_specifications_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve a job  # noqa: E501

        Retrieves a job from the \"jobs\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_job_specifications_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_job_specifications_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_job_specifications_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_job_specifications_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/job_specifications/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_jobs(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all job documents  # noqa: E501

        Retrieve all documents from the \"jobs\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str name:
        :param str command:
        :param str status:
        :param bool cancel_on_blocking_job_failure:
        :param bool supports_termination:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_jobs_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_jobs_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_jobs_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all job documents  # noqa: E501

        Retrieve all documents from the \"jobs\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str name:
        :param str command:
        :param str status:
        :param bool cancel_on_blocking_job_failure:
        :param bool supports_termination:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit', 'sort_by', 'reverse_sort', 'key', 'name', 'command', 'status', 'cancel_on_blocking_job_failure', 'supports_termination']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'reverse_sort' in params:
            query_params.append(('reverse_sort', params['reverse_sort']))  # noqa: E501
        if 'key' in params:
            query_params.append(('_key', params['key']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'command' in params:
            query_params.append(('command', params['command']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'cancel_on_blocking_job_failure' in params:
            query_params.append(('cancel_on_blocking_job_failure', params['cancel_on_blocking_job_failure']))  # noqa: E501
        if 'supports_termination' in params:
            query_params.append(('supports_termination', params['supports_termination']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_jobs_find_by_needs_file_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve all jobs that need a file  # noqa: E501

        Retrieves all jobs connected to a file by the needs edge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_find_by_needs_file_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: File key (required)
        :param float skip:
        :param float limit:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_jobs_find_by_needs_file_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_jobs_find_by_needs_file_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_jobs_find_by_needs_file_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve all jobs that need a file  # noqa: E501

        Retrieves all jobs connected to a file by the needs edge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_find_by_needs_file_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: File key (required)
        :param float skip:
        :param float limit:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'skip', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_jobs_find_by_needs_file_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_jobs_find_by_needs_file_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_jobs_find_by_needs_file_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs/find_by_needs_file/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_jobs_find_by_status_status(self, workflow, status, **kwargs):  # noqa: E501
        """Retrieve all jobs with a specific status  # noqa: E501

        Retrieves all jobs from the \"jobs\" collection with a specific status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_find_by_status_status(workflow, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str status: Job status. (required)
        :param float skip:
        :param float limit:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_jobs_find_by_status_status_with_http_info(workflow, status, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_jobs_find_by_status_status_with_http_info(workflow, status, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_jobs_find_by_status_status_with_http_info(self, workflow, status, **kwargs):  # noqa: E501
        """Retrieve all jobs with a specific status  # noqa: E501

        Retrieves all jobs from the \"jobs\" collection with a specific status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_find_by_status_status_with_http_info(workflow, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str status: Job status. (required)
        :param float skip:
        :param float limit:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'status', 'skip', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_jobs_find_by_status_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_jobs_find_by_status_status`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `get_workflows_workflow_jobs_find_by_status_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'status' in params:
            path_params['status'] = params['status']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs/find_by_status/{status}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_jobs_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the job for a key.  # noqa: E501

        Retrieve the document from the \"jobs\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the jobs document (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_jobs_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_jobs_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_jobs_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the job for a key.  # noqa: E501

        Retrieve the document from the \"jobs\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the jobs document (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_jobs_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_jobs_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_jobs_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_jobs_key_process_stats(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the job process stats for a job.  # noqa: E501

        Retrieve the job process stats for a job by its key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_key_process_stats(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: list[JobProcessStatsKeyModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_jobs_key_process_stats_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_jobs_key_process_stats_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_jobs_key_process_stats_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the job process stats for a job.  # noqa: E501

        Retrieve the job process stats for a job by its key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_key_process_stats_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: list[JobProcessStatsKeyModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_jobs_key_process_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_jobs_key_process_stats`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_jobs_key_process_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs/{key}/process_stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JobProcessStatsKeyModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_jobs_key_resource_requirements(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the resource requirements for a job.  # noqa: E501

        Retrieve the resource requirements for a job by its key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_key_resource_requirements(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: ResourceRequirementsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_jobs_key_resource_requirements_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_jobs_key_resource_requirements_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_jobs_key_resource_requirements_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the resource requirements for a job.  # noqa: E501

        Retrieve the resource requirements for a job by its key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_key_resource_requirements_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: ResourceRequirementsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_jobs_key_resource_requirements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_jobs_key_resource_requirements`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_jobs_key_resource_requirements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs/{key}/resource_requirements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceRequirementsKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_jobs_key_user_data_consumes(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve all user data consumed by a job.  # noqa: E501

        Retrieve all user data consumed by a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_key_user_data_consumes(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_jobs_key_user_data_consumes_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_jobs_key_user_data_consumes_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_jobs_key_user_data_consumes_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve all user data consumed by a job.  # noqa: E501

        Retrieve all user data consumed by a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_key_user_data_consumes_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_jobs_key_user_data_consumes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_jobs_key_user_data_consumes`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_jobs_key_user_data_consumes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs/{key}/user_data_consumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_jobs_key_user_data_stores(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve all user data for a job.  # noqa: E501

        Retrieve all user data for a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_key_user_data_stores(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_jobs_key_user_data_stores_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_jobs_key_user_data_stores_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_jobs_key_user_data_stores_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve all user data for a job.  # noqa: E501

        Retrieve all user data for a job.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_jobs_key_user_data_stores_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_jobs_key_user_data_stores" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_jobs_key_user_data_stores`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_jobs_key_user_data_stores`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs/{key}/user_data_stores', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_local_schedulers(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all local compute node configuration documents  # noqa: E501

        Retrieve all documents from the \"local_schedulers\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_local_schedulers(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str memory:
        :param int num_cpus:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_local_schedulers_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_local_schedulers_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_local_schedulers_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all local compute node configuration documents  # noqa: E501

        Retrieve all documents from the \"local_schedulers\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_local_schedulers_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str memory:
        :param int num_cpus:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit', 'sort_by', 'reverse_sort', 'key', 'memory', 'num_cpus']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_local_schedulers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_local_schedulers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'reverse_sort' in params:
            query_params.append(('reverse_sort', params['reverse_sort']))  # noqa: E501
        if 'key' in params:
            query_params.append(('_key', params['key']))  # noqa: E501
        if 'memory' in params:
            query_params.append(('memory', params['memory']))  # noqa: E501
        if 'num_cpus' in params:
            query_params.append(('num_cpus', params['num_cpus']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/local_schedulers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_local_schedulers_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the local compute node configuration for a key.  # noqa: E501

        Retrieve the document from the \"local_schedulers\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_local_schedulers_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the local_schedulers document (required)
        :return: WorkflowLocalSchedulersModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_local_schedulers_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_local_schedulers_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_local_schedulers_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the local compute node configuration for a key.  # noqa: E501

        Retrieve the document from the \"local_schedulers\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_local_schedulers_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the local_schedulers document (required)
        :return: WorkflowLocalSchedulersModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_local_schedulers_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_local_schedulers_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_local_schedulers_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/local_schedulers/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowLocalSchedulersModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_resource_requirements(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all resource requirements documents  # noqa: E501

        Retrieve all documents from the \"resource_requirements\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_resource_requirements(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str name:
        :param str memory:
        :param int num_cpus:
        :param int num_gpus:
        :param int num_nodes:
        :param str runtime:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_resource_requirements_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_resource_requirements_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_resource_requirements_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all resource requirements documents  # noqa: E501

        Retrieve all documents from the \"resource_requirements\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_resource_requirements_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str name:
        :param str memory:
        :param int num_cpus:
        :param int num_gpus:
        :param int num_nodes:
        :param str runtime:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit', 'sort_by', 'reverse_sort', 'key', 'name', 'memory', 'num_cpus', 'num_gpus', 'num_nodes', 'runtime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_resource_requirements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_resource_requirements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'reverse_sort' in params:
            query_params.append(('reverse_sort', params['reverse_sort']))  # noqa: E501
        if 'key' in params:
            query_params.append(('_key', params['key']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'memory' in params:
            query_params.append(('memory', params['memory']))  # noqa: E501
        if 'num_cpus' in params:
            query_params.append(('num_cpus', params['num_cpus']))  # noqa: E501
        if 'num_gpus' in params:
            query_params.append(('num_gpus', params['num_gpus']))  # noqa: E501
        if 'num_nodes' in params:
            query_params.append(('num_nodes', params['num_nodes']))  # noqa: E501
        if 'runtime' in params:
            query_params.append(('runtime', params['runtime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/resource_requirements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_resource_requirements_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the resource requirements for a key.  # noqa: E501

        Retrieve the document from the \"resource_requirements\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_resource_requirements_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the resource_requirements document (required)
        :return: WorkflowResourceRequirementsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_resource_requirements_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_resource_requirements_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_resource_requirements_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the resource requirements for a key.  # noqa: E501

        Retrieve the document from the \"resource_requirements\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_resource_requirements_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the resource_requirements document (required)
        :return: WorkflowResourceRequirementsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_resource_requirements_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_resource_requirements_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_resource_requirements_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/resource_requirements/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowResourceRequirementsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_results(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all result documents  # noqa: E501

        Retrieve all documents from the \"results\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_results(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str job_key:
        :param int run_id:
        :param int return_code:
        :param str status:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_results_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_results_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_results_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all result documents  # noqa: E501

        Retrieve all documents from the \"results\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_results_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str job_key:
        :param int run_id:
        :param int return_code:
        :param str status:
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit', 'sort_by', 'reverse_sort', 'key', 'job_key', 'run_id', 'return_code', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'reverse_sort' in params:
            query_params.append(('reverse_sort', params['reverse_sort']))  # noqa: E501
        if 'key' in params:
            query_params.append(('_key', params['key']))  # noqa: E501
        if 'job_key' in params:
            query_params.append(('job_key', params['job_key']))  # noqa: E501
        if 'run_id' in params:
            query_params.append(('run_id', params['run_id']))  # noqa: E501
        if 'return_code' in params:
            query_params.append(('return_code', params['return_code']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_results_find_by_job_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the latest result for a job  # noqa: E501

        Retrieve the latest result for a job. Throws an error if no result is stored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_results_find_by_job_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: StatusRevModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_results_find_by_job_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_results_find_by_job_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_results_find_by_job_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the latest result for a job  # noqa: E501

        Retrieve the latest result for a job. Throws an error if no result is stored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_results_find_by_job_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: StatusRevModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_results_find_by_job_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_results_find_by_job_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_results_find_by_job_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/results/find_by_job/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusRevModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_results_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the result for a key.  # noqa: E501

        Retrieve the document from the \"results\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_results_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the results document (required)
        :return: WorkflowResultsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_results_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_results_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_results_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the result for a key.  # noqa: E501

        Retrieve the document from the \"results\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_results_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the results document (required)
        :return: WorkflowResultsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_results_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_results_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_results_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/results/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowResultsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_scheduled_compute_nodes(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all scheduled compute node documents  # noqa: E501

        Retrieve all documents from the \"scheduled_compute_nodes\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_scheduled_compute_nodes(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str scheduler_id:
        :param str scheduler_config_id:
        :param str status:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_scheduled_compute_nodes_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_scheduled_compute_nodes_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_scheduled_compute_nodes_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all scheduled compute node documents  # noqa: E501

        Retrieve all documents from the \"scheduled_compute_nodes\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_scheduled_compute_nodes_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str scheduler_id:
        :param str scheduler_config_id:
        :param str status:
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit', 'sort_by', 'reverse_sort', 'key', 'scheduler_id', 'scheduler_config_id', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_scheduled_compute_nodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_scheduled_compute_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'reverse_sort' in params:
            query_params.append(('reverse_sort', params['reverse_sort']))  # noqa: E501
        if 'key' in params:
            query_params.append(('_key', params['key']))  # noqa: E501
        if 'scheduler_id' in params:
            query_params.append(('scheduler_id', params['scheduler_id']))  # noqa: E501
        if 'scheduler_config_id' in params:
            query_params.append(('scheduler_config_id', params['scheduler_config_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/scheduled_compute_nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_scheduled_compute_nodes_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the scheduled compute node for a key.  # noqa: E501

        Retrieve the document from the \"scheduled_compute_nodes\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_scheduled_compute_nodes_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the scheduled_compute_nodes document (required)
        :return: WorkflowScheduledComputeNodesModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_scheduled_compute_nodes_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_scheduled_compute_nodes_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_scheduled_compute_nodes_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the scheduled compute node for a key.  # noqa: E501

        Retrieve the document from the \"scheduled_compute_nodes\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_scheduled_compute_nodes_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the scheduled_compute_nodes document (required)
        :return: WorkflowScheduledComputeNodesModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_scheduled_compute_nodes_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_scheduled_compute_nodes_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_scheduled_compute_nodes_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/scheduled_compute_nodes/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowScheduledComputeNodesModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_slurm_schedulers(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all Slurm compute node configuration documents  # noqa: E501

        Retrieve all documents from the \"slurm_schedulers\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_slurm_schedulers(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str name:
        :param str account:
        :param str gres:
        :param str mem:
        :param int nodes:
        :param str partition:
        :param str qos:
        :param str tmp:
        :param str walltime:
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_slurm_schedulers_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_slurm_schedulers_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_slurm_schedulers_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all Slurm compute node configuration documents  # noqa: E501

        Retrieve all documents from the \"slurm_schedulers\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_slurm_schedulers_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str name:
        :param str account:
        :param str gres:
        :param str mem:
        :param int nodes:
        :param str partition:
        :param str qos:
        :param str tmp:
        :param str walltime:
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit', 'sort_by', 'reverse_sort', 'key', 'name', 'account', 'gres', 'mem', 'nodes', 'partition', 'qos', 'tmp', 'walltime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_slurm_schedulers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_slurm_schedulers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'reverse_sort' in params:
            query_params.append(('reverse_sort', params['reverse_sort']))  # noqa: E501
        if 'key' in params:
            query_params.append(('_key', params['key']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'account' in params:
            query_params.append(('account', params['account']))  # noqa: E501
        if 'gres' in params:
            query_params.append(('gres', params['gres']))  # noqa: E501
        if 'mem' in params:
            query_params.append(('mem', params['mem']))  # noqa: E501
        if 'nodes' in params:
            query_params.append(('nodes', params['nodes']))  # noqa: E501
        if 'partition' in params:
            query_params.append(('partition', params['partition']))  # noqa: E501
        if 'qos' in params:
            query_params.append(('qos', params['qos']))  # noqa: E501
        if 'tmp' in params:
            query_params.append(('tmp', params['tmp']))  # noqa: E501
        if 'walltime' in params:
            query_params.append(('walltime', params['walltime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/slurm_schedulers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_slurm_schedulers_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the Slurm compute node configuration for a key.  # noqa: E501

        Retrieve the document from the \"slurm_schedulers\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_slurm_schedulers_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the slurm_schedulers document (required)
        :return: WorkflowSlurmSchedulersModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_slurm_schedulers_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_slurm_schedulers_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_slurm_schedulers_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the Slurm compute node configuration for a key.  # noqa: E501

        Retrieve the document from the \"slurm_schedulers\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_slurm_schedulers_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the slurm_schedulers document (required)
        :return: WorkflowSlurmSchedulersModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_slurm_schedulers_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_slurm_schedulers_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_slurm_schedulers_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/slurm_schedulers/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowSlurmSchedulersModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_user_data(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all user data documents  # noqa: E501

        Retrieve all documents from the \"user_data\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_user_data(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str name:
        :param bool is_ephemeral:
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_user_data_with_http_info(workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_user_data_with_http_info(workflow, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_user_data_with_http_info(self, workflow, **kwargs):  # noqa: E501
        """Retrieve all user data documents  # noqa: E501

        Retrieve all documents from the \"user_data\" collection for one workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_user_data_with_http_info(workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param float skip:
        :param float limit:
        :param str sort_by:
        :param bool reverse_sort:
        :param str key:
        :param str name:
        :param bool is_ephemeral:
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'skip', 'limit', 'sort_by', 'reverse_sort', 'key', 'name', 'is_ephemeral']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_user_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_user_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'reverse_sort' in params:
            query_params.append(('reverse_sort', params['reverse_sort']))  # noqa: E501
        if 'key' in params:
            query_params.append(('_key', params['key']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'is_ephemeral' in params:
            query_params.append(('is_ephemeral', params['is_ephemeral']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/user_data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workflows_workflow_user_data_key(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the user data for a key.  # noqa: E501

        Retrieve the document from the \"user_data\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_user_data_key(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the user_data document (required)
        :return: WorkflowUserDataModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workflows_workflow_user_data_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workflows_workflow_user_data_key_with_http_info(workflow, key, **kwargs)  # noqa: E501
            return data

    def get_workflows_workflow_user_data_key_with_http_info(self, workflow, key, **kwargs):  # noqa: E501
        """Retrieve the user data for a key.  # noqa: E501

        Retrieve the document from the \"user_data\" collection by key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workflows_workflow_user_data_key_with_http_info(workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: key of the user_data document (required)
        :return: WorkflowUserDataModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workflows_workflow_user_data_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `get_workflows_workflow_user_data_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `get_workflows_workflow_user_data_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/user_data/{key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowUserDataModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflow_config(self, body, **kwargs):  # noqa: E501
        """Set workflow config  # noqa: E501

        Set workflow config in the \"workflow_config\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflow_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowConfigModel body: Workflow config (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflow_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflow_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_workflow_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Set workflow config  # noqa: E501

        Set workflow config in the \"workflow_config\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflow_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowConfigModel body: Workflow config (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflow_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflow_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflow_config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflow_specifications(self, body, **kwargs):  # noqa: E501
        """Store a workflow.  # noqa: E501

        Store a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflow_specifications(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowSpecificationsModel body: New workflow (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflow_specifications_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflow_specifications_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_workflow_specifications_with_http_info(self, body, **kwargs):  # noqa: E501
        """Store a workflow.  # noqa: E501

        Store a workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflow_specifications_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowSpecificationsModel body: New workflow (required)
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflow_specifications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflow_specifications`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflow_specifications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows(self, body, **kwargs):  # noqa: E501
        """Store a workflow.  # noqa: E501

        Store a workflow in the \"workflows\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowsModel body: Collection of jobs and dependent resources. (required)
        :return: WorkflowsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_workflows_with_http_info(self, body, **kwargs):  # noqa: E501
        """Store a workflow.  # noqa: E501

        Store a workflow in the \"workflows\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowsModel body: Collection of jobs and dependent resources. (required)
        :return: WorkflowsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_key_auto_tune_resource_requirements(self, key, **kwargs):  # noqa: E501
        """Enable workflow for auto-tuning resource requirements.  # noqa: E501

        Enable workflow for auto-tuning resource requirements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_auto_tune_resource_requirements(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_key_auto_tune_resource_requirements_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_key_auto_tune_resource_requirements_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def post_workflows_key_auto_tune_resource_requirements_with_http_info(self, key, **kwargs):  # noqa: E501
        """Enable workflow for auto-tuning resource requirements.  # noqa: E501

        Enable workflow for auto-tuning resource requirements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_auto_tune_resource_requirements_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_key_auto_tune_resource_requirements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_workflows_key_auto_tune_resource_requirements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/auto_tune_resource_requirements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_key_initialize_jobs(self, key, **kwargs):  # noqa: E501
        """Initialize job relationships.  # noqa: E501

        Initialize job relationships based on file and user_data relationships.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_initialize_jobs(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_key_initialize_jobs_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_key_initialize_jobs_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def post_workflows_key_initialize_jobs_with_http_info(self, key, **kwargs):  # noqa: E501
        """Initialize job relationships.  # noqa: E501

        Initialize job relationships based on file and user_data relationships.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_initialize_jobs_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_key_initialize_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_workflows_key_initialize_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/initialize_jobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_key_join_by_inbound_edge_collection_edge(self, body, key, collection, edge, **kwargs):  # noqa: E501
        """Retrieve a joined table of two collections.  # noqa: E501

        Retrieve a table of the collections joined by an inbound edge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_join_by_inbound_edge_collection_edge(body, key, collection, edge, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param object body: Filters for query (required)
        :param str key: Workflow key (required)
        :param str collection: From collection (required)
        :param str edge: Edge name (required)
        :param str collection_key:
        :param str collection_name:
        :param float skip:
        :param float limit:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_key_join_by_inbound_edge_collection_edge_with_http_info(body, key, collection, edge, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_key_join_by_inbound_edge_collection_edge_with_http_info(body, key, collection, edge, **kwargs)  # noqa: E501
            return data

    def post_workflows_key_join_by_inbound_edge_collection_edge_with_http_info(self, body, key, collection, edge, **kwargs):  # noqa: E501
        """Retrieve a joined table of two collections.  # noqa: E501

        Retrieve a table of the collections joined by an inbound edge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_join_by_inbound_edge_collection_edge_with_http_info(body, key, collection, edge, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param object body: Filters for query (required)
        :param str key: Workflow key (required)
        :param str collection: From collection (required)
        :param str edge: Edge name (required)
        :param str collection_key:
        :param str collection_name:
        :param float skip:
        :param float limit:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'collection', 'edge', 'collection_key', 'collection_name', 'skip', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_key_join_by_inbound_edge_collection_edge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_key_join_by_inbound_edge_collection_edge`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_workflows_key_join_by_inbound_edge_collection_edge`")  # noqa: E501
        # verify the required parameter 'collection' is set
        if ('collection' not in params or
                params['collection'] is None):
            raise ValueError("Missing the required parameter `collection` when calling `post_workflows_key_join_by_inbound_edge_collection_edge`")  # noqa: E501
        # verify the required parameter 'edge' is set
        if ('edge' not in params or
                params['edge'] is None):
            raise ValueError("Missing the required parameter `edge` when calling `post_workflows_key_join_by_inbound_edge_collection_edge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'edge' in params:
            path_params['edge'] = params['edge']  # noqa: E501

        query_params = []
        if 'collection_key' in params:
            query_params.append(('collection_key', params['collection_key']))  # noqa: E501
        if 'collection_name' in params:
            query_params.append(('collection_name', params['collection_name']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/join_by_inbound_edge/{collection}/{edge}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_key_join_by_outbound_edge_collection_edge(self, body, key, collection, edge, **kwargs):  # noqa: E501
        """Retrieve a joined table of two collections.  # noqa: E501

        Retrieve a table of the collections joined by an outbound edge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_join_by_outbound_edge_collection_edge(body, key, collection, edge, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param object body: Filters for query (required)
        :param str key: Workflow key (required)
        :param str collection: From collection (required)
        :param str edge: Edge name (required)
        :param str collection_key:
        :param str collection_name:
        :param float skip:
        :param float limit:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_key_join_by_outbound_edge_collection_edge_with_http_info(body, key, collection, edge, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_key_join_by_outbound_edge_collection_edge_with_http_info(body, key, collection, edge, **kwargs)  # noqa: E501
            return data

    def post_workflows_key_join_by_outbound_edge_collection_edge_with_http_info(self, body, key, collection, edge, **kwargs):  # noqa: E501
        """Retrieve a joined table of two collections.  # noqa: E501

        Retrieve a table of the collections joined by an outbound edge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_join_by_outbound_edge_collection_edge_with_http_info(body, key, collection, edge, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param object body: Filters for query (required)
        :param str key: Workflow key (required)
        :param str collection: From collection (required)
        :param str edge: Edge name (required)
        :param str collection_key:
        :param str collection_name:
        :param float skip:
        :param float limit:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'collection', 'edge', 'collection_key', 'collection_name', 'skip', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_key_join_by_outbound_edge_collection_edge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_key_join_by_outbound_edge_collection_edge`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_workflows_key_join_by_outbound_edge_collection_edge`")  # noqa: E501
        # verify the required parameter 'collection' is set
        if ('collection' not in params or
                params['collection'] is None):
            raise ValueError("Missing the required parameter `collection` when calling `post_workflows_key_join_by_outbound_edge_collection_edge`")  # noqa: E501
        # verify the required parameter 'edge' is set
        if ('edge' not in params or
                params['edge'] is None):
            raise ValueError("Missing the required parameter `edge` when calling `post_workflows_key_join_by_outbound_edge_collection_edge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501
        if 'collection' in params:
            path_params['collection'] = params['collection']  # noqa: E501
        if 'edge' in params:
            path_params['edge'] = params['edge']  # noqa: E501

        query_params = []
        if 'collection_key' in params:
            query_params.append(('collection_key', params['collection_key']))  # noqa: E501
        if 'collection_name' in params:
            query_params.append(('collection_name', params['collection_name']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/join_by_outbound_edge/{collection}/{edge}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_key_prepare_jobs_for_scheduling(self, key, **kwargs):  # noqa: E501
        """Return scheduler IDs that need to be activated.  # noqa: E501

        Return scheduler IDs that need to be activated. Sets job status to scheduled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_prepare_jobs_for_scheduling(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_key_prepare_jobs_for_scheduling_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_key_prepare_jobs_for_scheduling_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def post_workflows_key_prepare_jobs_for_scheduling_with_http_info(self, key, **kwargs):  # noqa: E501
        """Return scheduler IDs that need to be activated.  # noqa: E501

        Return scheduler IDs that need to be activated. Sets job status to scheduled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_prepare_jobs_for_scheduling_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_key_prepare_jobs_for_scheduling" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_workflows_key_prepare_jobs_for_scheduling`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/prepare_jobs_for_scheduling', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_key_prepare_jobs_for_submission(self, body, key, **kwargs):  # noqa: E501
        """Return ready jobs, accounting for resource requirements.  # noqa: E501

        Return jobs that are ready for submission and meet worker resource Sets status to submitted_pending.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_prepare_jobs_for_submission(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param KeyPrepareJobsForSubmissionModel body: Available worker resources. (required)
        :param str key: Workflow key (required)
        :param float limit:
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_key_prepare_jobs_for_submission_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_key_prepare_jobs_for_submission_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def post_workflows_key_prepare_jobs_for_submission_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Return ready jobs, accounting for resource requirements.  # noqa: E501

        Return jobs that are ready for submission and meet worker resource Sets status to submitted_pending.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_prepare_jobs_for_submission_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param KeyPrepareJobsForSubmissionModel body: Available worker resources. (required)
        :param str key: Workflow key (required)
        :param float limit:
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_key_prepare_jobs_for_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_key_prepare_jobs_for_submission`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_workflows_key_prepare_jobs_for_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/prepare_jobs_for_submission', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_key_prepare_next_jobs_for_submission(self, key, **kwargs):  # noqa: E501
        """Return user-requested number of ready jobs.  # noqa: E501

        Return user-requested number of jobs that are ready for submission. Sets status to submitted_pending.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_prepare_next_jobs_for_submission(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :param float limit:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_key_prepare_next_jobs_for_submission_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_key_prepare_next_jobs_for_submission_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def post_workflows_key_prepare_next_jobs_for_submission_with_http_info(self, key, **kwargs):  # noqa: E501
        """Return user-requested number of ready jobs.  # noqa: E501

        Return user-requested number of jobs that are ready for submission. Sets status to submitted_pending.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_prepare_next_jobs_for_submission_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :param float limit:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_key_prepare_next_jobs_for_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_workflows_key_prepare_next_jobs_for_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/prepare_next_jobs_for_submission', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_key_process_auto_tune_resource_requirements_results(self, key, **kwargs):  # noqa: E501
        """Process the results of auto-tuning resource requirements.  # noqa: E501

        Process the results of auto-tuning resource requirements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_process_auto_tune_resource_requirements_results(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_key_process_auto_tune_resource_requirements_results_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_key_process_auto_tune_resource_requirements_results_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def post_workflows_key_process_auto_tune_resource_requirements_results_with_http_info(self, key, **kwargs):  # noqa: E501
        """Process the results of auto-tuning resource requirements.  # noqa: E501

        Process the results of auto-tuning resource requirements.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_process_auto_tune_resource_requirements_results_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_key_process_auto_tune_resource_requirements_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_workflows_key_process_auto_tune_resource_requirements_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/process_auto_tune_resource_requirements_results', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_key_process_changed_job_inputs(self, key, **kwargs):  # noqa: E501
        """Check for changed job inputs and update status accordingly.  # noqa: E501

        Check for changed job inputs and update status accordingly.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_process_changed_job_inputs(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_key_process_changed_job_inputs_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_key_process_changed_job_inputs_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def post_workflows_key_process_changed_job_inputs_with_http_info(self, key, **kwargs):  # noqa: E501
        """Check for changed job inputs and update status accordingly.  # noqa: E501

        Check for changed job inputs and update status accordingly.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_process_changed_job_inputs_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_key_process_changed_job_inputs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_workflows_key_process_changed_job_inputs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/process_changed_job_inputs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20024',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_key_reset_job_status(self, key, **kwargs):  # noqa: E501
        """Reset job status.  # noqa: E501

        Reset status for jobs to uninitialized.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_reset_job_status(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :param bool failed_only: Only reset failed jobs
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_key_reset_job_status_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_key_reset_job_status_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def post_workflows_key_reset_job_status_with_http_info(self, key, **kwargs):  # noqa: E501
        """Reset job status.  # noqa: E501

        Reset status for jobs to uninitialized.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_reset_job_status_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :param bool failed_only: Only reset failed jobs
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'failed_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_key_reset_job_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_workflows_key_reset_job_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []
        if 'failed_only' in params:
            query_params.append(('failed_only', params['failed_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/reset_job_status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_key_reset_status(self, key, **kwargs):  # noqa: E501
        """Reset worklow status.  # noqa: E501

        Reset workflow status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_reset_status(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_key_reset_status_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_key_reset_status_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def post_workflows_key_reset_status_with_http_info(self, key, **kwargs):  # noqa: E501
        """Reset worklow status.  # noqa: E501

        Reset workflow status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_key_reset_status_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_key_reset_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_workflows_key_reset_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/reset_status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_aws_schedulers(self, body, workflow, **kwargs):  # noqa: E501
        """Store a AWS compute node configuration.  # noqa: E501

        Store a AWS compute node configuration in the \"aws_schedulers\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_aws_schedulers(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowAwsSchedulersModel body: Result of a AWS compute node configuration. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowAwsSchedulersModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_aws_schedulers_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_aws_schedulers_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_aws_schedulers_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a AWS compute node configuration.  # noqa: E501

        Store a AWS compute node configuration in the \"aws_schedulers\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_aws_schedulers_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowAwsSchedulersModel body: Result of a AWS compute node configuration. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowAwsSchedulersModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_aws_schedulers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_aws_schedulers`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_aws_schedulers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/aws_schedulers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowAwsSchedulersModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_compute_node_stats(self, body, workflow, **kwargs):  # noqa: E501
        """Store a compute node statistics.  # noqa: E501

        Store a compute node statistics in the \"compute_node_stats\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_compute_node_stats(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowComputeNodeStatsModel body: Result of a compute node statistics. (required)
        :param str workflow: Workflow key (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_compute_node_stats_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_compute_node_stats_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_compute_node_stats_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a compute node statistics.  # noqa: E501

        Store a compute node statistics in the \"compute_node_stats\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_compute_node_stats_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowComputeNodeStatsModel body: Result of a compute node statistics. (required)
        :param str workflow: Workflow key (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_compute_node_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_compute_node_stats`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_compute_node_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/compute_node_stats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_compute_nodes(self, body, workflow, **kwargs):  # noqa: E501
        """Store a compute node.  # noqa: E501

        Store a compute node in the \"compute_nodes\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_compute_nodes(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowComputeNodesModel body: Result of a compute node. (required)
        :param str workflow: Workflow key (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_compute_nodes_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_compute_nodes_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_compute_nodes_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a compute node.  # noqa: E501

        Store a compute node in the \"compute_nodes\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_compute_nodes_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowComputeNodesModel body: Result of a compute node. (required)
        :param str workflow: Workflow key (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_compute_nodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_compute_nodes`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_compute_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/compute_nodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_edges_name(self, body, workflow, name, **kwargs):  # noqa: E501
        """Store an edge between two vertexes.  # noqa: E501

        Store an edge between two vertexes in the designated collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_edges_name(body, workflow, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param EdgesNameModel body: Relationship between two vertexes (required)
        :param str workflow: Workflow key (required)
        :param str name: Edge name (required)
        :return: EdgesNameModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_edges_name_with_http_info(body, workflow, name, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_edges_name_with_http_info(body, workflow, name, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_edges_name_with_http_info(self, body, workflow, name, **kwargs):  # noqa: E501
        """Store an edge between two vertexes.  # noqa: E501

        Store an edge between two vertexes in the designated collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_edges_name_with_http_info(body, workflow, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param EdgesNameModel body: Relationship between two vertexes (required)
        :param str workflow: Workflow key (required)
        :param str name: Edge name (required)
        :return: EdgesNameModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_edges_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_edges_name`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_edges_name`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_workflows_workflow_edges_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/edges/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgesNameModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_events(self, body, workflow, **kwargs):  # noqa: E501
        """Store a event.  # noqa: E501

        Store a event in the \"events\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_events(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param object body: Result of a event. (required)
        :param str workflow: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_events_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_events_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_events_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a event.  # noqa: E501

        Store a event in the \"events\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_events_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param object body: Result of a event. (required)
        :param str workflow: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_events`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_files(self, body, workflow, **kwargs):  # noqa: E501
        """Store a file.  # noqa: E501

        Store a file in the \"files\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_files(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowFilesModel body: Result of a file. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowFilesModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_files_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_files_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_files_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a file.  # noqa: E501

        Store a file in the \"files\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_files_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowFilesModel body: Result of a file. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowFilesModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_files`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowFilesModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_job_process_stats(self, body, workflow, **kwargs):  # noqa: E501
        """Store a job process statistics.  # noqa: E501

        Store a job process statistics in the \"job_process_stats\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_job_process_stats(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowJobProcessStatsModel body: Result of a job process statistics. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowJobProcessStatsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_job_process_stats_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_job_process_stats_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_job_process_stats_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a job process statistics.  # noqa: E501

        Store a job process statistics in the \"job_process_stats\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_job_process_stats_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowJobProcessStatsModel body: Result of a job process statistics. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowJobProcessStatsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_job_process_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_job_process_stats`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_job_process_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/job_process_stats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowJobProcessStatsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_job_specifications(self, body, workflow, **kwargs):  # noqa: E501
        """Store a job and create edges.  # noqa: E501

        Store a job in the \"jobs\" collection and create edges.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_job_specifications(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowJobSpecificationsModel body: job definition to store in the collection. (required)
        :param str workflow: Workflow key (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_job_specifications_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_job_specifications_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_job_specifications_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a job and create edges.  # noqa: E501

        Store a job in the \"jobs\" collection and create edges.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_job_specifications_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowJobSpecificationsModel body: job definition to store in the collection. (required)
        :param str workflow: Workflow key (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_job_specifications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_job_specifications`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_job_specifications`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/job_specifications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_jobs(self, body, workflow, **kwargs):  # noqa: E501
        """Store a job.  # noqa: E501

        Store a job in the \"jobs\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_jobs(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowJobsModel body: Result of a job. (required)
        :param str workflow: Workflow key (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_jobs_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_jobs_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_jobs_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a job.  # noqa: E501

        Store a job in the \"jobs\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_jobs_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowJobsModel body: Result of a job. (required)
        :param str workflow: Workflow key (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_jobs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_jobs`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_jobs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_jobs_key_complete_job_status_rev(self, body, workflow, key, status, rev, **kwargs):  # noqa: E501
        """Complete a job and add a result.  # noqa: E501

        Complete a job, connect it to a result, and manage side effects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_jobs_key_complete_job_status_rev(body, workflow, key, status, rev, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param StatusRevModel body: Result of the job. (required)
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :param str status: New job status. (required)
        :param str rev: Current job revision. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_jobs_key_complete_job_status_rev_with_http_info(body, workflow, key, status, rev, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_jobs_key_complete_job_status_rev_with_http_info(body, workflow, key, status, rev, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_jobs_key_complete_job_status_rev_with_http_info(self, body, workflow, key, status, rev, **kwargs):  # noqa: E501
        """Complete a job and add a result.  # noqa: E501

        Complete a job, connect it to a result, and manage side effects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_jobs_key_complete_job_status_rev_with_http_info(body, workflow, key, status, rev, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param StatusRevModel body: Result of the job. (required)
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :param str status: New job status. (required)
        :param str rev: Current job revision. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key', 'status', 'rev']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_jobs_key_complete_job_status_rev" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_jobs_key_complete_job_status_rev`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_jobs_key_complete_job_status_rev`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_workflows_workflow_jobs_key_complete_job_status_rev`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `post_workflows_workflow_jobs_key_complete_job_status_rev`")  # noqa: E501
        # verify the required parameter 'rev' is set
        if ('rev' not in params or
                params['rev'] is None):
            raise ValueError("Missing the required parameter `rev` when calling `post_workflows_workflow_jobs_key_complete_job_status_rev`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501
        if 'status' in params:
            path_params['status'] = params['status']  # noqa: E501
        if 'rev' in params:
            path_params['rev'] = params['rev']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs/{key}/complete_job/{status}/{rev}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_jobs_key_user_data(self, body, workflow, key, **kwargs):  # noqa: E501
        """Store user data for a job.  # noqa: E501

        Store user data for a job and connect the two vertexes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_jobs_key_user_data(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param KeyUserDataModel body: User data for the job. (required)
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: KeyUserDataModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_jobs_key_user_data_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_jobs_key_user_data_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_jobs_key_user_data_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Store user data for a job.  # noqa: E501

        Store user data for a job and connect the two vertexes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_jobs_key_user_data_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param KeyUserDataModel body: User data for the job. (required)
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :return: KeyUserDataModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_jobs_key_user_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_jobs_key_user_data`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_jobs_key_user_data`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `post_workflows_workflow_jobs_key_user_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs/{key}/user_data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyUserDataModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_local_schedulers(self, body, workflow, **kwargs):  # noqa: E501
        """Store a local compute node configuration.  # noqa: E501

        Store a local compute node configuration in the \"local_schedulers\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_local_schedulers(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowLocalSchedulersModel body: Result of a local compute node configuration. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowLocalSchedulersModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_local_schedulers_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_local_schedulers_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_local_schedulers_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a local compute node configuration.  # noqa: E501

        Store a local compute node configuration in the \"local_schedulers\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_local_schedulers_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowLocalSchedulersModel body: Result of a local compute node configuration. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowLocalSchedulersModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_local_schedulers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_local_schedulers`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_local_schedulers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/local_schedulers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowLocalSchedulersModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_resource_requirements(self, body, workflow, **kwargs):  # noqa: E501
        """Store a resource requirements.  # noqa: E501

        Store a resource requirements in the \"resource_requirements\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_resource_requirements(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowResourceRequirementsModel body: Result of a resource requirements. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowResourceRequirementsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_resource_requirements_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_resource_requirements_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_resource_requirements_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a resource requirements.  # noqa: E501

        Store a resource requirements in the \"resource_requirements\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_resource_requirements_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowResourceRequirementsModel body: Result of a resource requirements. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowResourceRequirementsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_resource_requirements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_resource_requirements`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_resource_requirements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/resource_requirements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowResourceRequirementsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_results(self, body, workflow, **kwargs):  # noqa: E501
        """Store a result.  # noqa: E501

        Store a result in the \"results\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_results(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowResultsModel body: Result of a result. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowResultsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_results_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_results_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_results_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a result.  # noqa: E501

        Store a result in the \"results\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_results_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowResultsModel body: Result of a result. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowResultsModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_results`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/results', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowResultsModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_scheduled_compute_nodes(self, body, workflow, **kwargs):  # noqa: E501
        """Store a scheduled compute node.  # noqa: E501

        Store a scheduled compute node in the \"scheduled_compute_nodes\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_scheduled_compute_nodes(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowScheduledComputeNodesModel body: Result of a scheduled compute node. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowScheduledComputeNodesModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_scheduled_compute_nodes_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_scheduled_compute_nodes_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_scheduled_compute_nodes_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a scheduled compute node.  # noqa: E501

        Store a scheduled compute node in the \"scheduled_compute_nodes\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_scheduled_compute_nodes_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowScheduledComputeNodesModel body: Result of a scheduled compute node. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowScheduledComputeNodesModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_scheduled_compute_nodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_scheduled_compute_nodes`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_scheduled_compute_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/scheduled_compute_nodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowScheduledComputeNodesModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_slurm_schedulers(self, body, workflow, **kwargs):  # noqa: E501
        """Store a Slurm compute node configuration.  # noqa: E501

        Store a Slurm compute node configuration in the \"slurm_schedulers\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_slurm_schedulers(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowSlurmSchedulersModel body: Result of a Slurm compute node configuration. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowSlurmSchedulersModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_slurm_schedulers_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_slurm_schedulers_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_slurm_schedulers_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a Slurm compute node configuration.  # noqa: E501

        Store a Slurm compute node configuration in the \"slurm_schedulers\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_slurm_schedulers_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowSlurmSchedulersModel body: Result of a Slurm compute node configuration. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowSlurmSchedulersModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_slurm_schedulers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_slurm_schedulers`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_slurm_schedulers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/slurm_schedulers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowSlurmSchedulersModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_workflows_workflow_user_data(self, body, workflow, **kwargs):  # noqa: E501
        """Store a user data.  # noqa: E501

        Store a user data in the \"user_data\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_user_data(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowUserDataModel body: Result of a user data. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowUserDataModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_workflows_workflow_user_data_with_http_info(body, workflow, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workflows_workflow_user_data_with_http_info(body, workflow, **kwargs)  # noqa: E501
            return data

    def post_workflows_workflow_user_data_with_http_info(self, body, workflow, **kwargs):  # noqa: E501
        """Store a user data.  # noqa: E501

        Store a user data in the \"user_data\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_workflows_workflow_user_data_with_http_info(body, workflow, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowUserDataModel body: Result of a user data. (required)
        :param str workflow: Workflow key (required)
        :return: WorkflowUserDataModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_workflows_workflow_user_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_workflows_workflow_user_data`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `post_workflows_workflow_user_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/user_data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowUserDataModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflow_config_key(self, body, key, **kwargs):  # noqa: E501
        """Update workflow config  # noqa: E501

        Update workflow config in the \"workflow_config\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflow_config_key(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowConfigKeyModel body: Updated workflow config (required)
        :param str key: Key of the config. (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflow_config_key_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflow_config_key_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def put_workflow_config_key_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Update workflow config  # noqa: E501

        Update workflow config in the \"workflow_config\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflow_config_key_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowConfigKeyModel body: Updated workflow config (required)
        :param str key: Key of the config. (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflow_config_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflow_config_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflow_config_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflow_config/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflow_config_reset(self, **kwargs):  # noqa: E501
        """Reset workflow config  # noqa: E501

        Rest workflow config in the \"workflow_config\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflow_config_reset(async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflow_config_reset_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_workflow_config_reset_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_workflow_config_reset_with_http_info(self, **kwargs):  # noqa: E501
        """Reset workflow config  # noqa: E501

        Rest workflow config in the \"workflow_config\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflow_config_reset_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflow_config_reset" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflow_config/reset', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_key(self, body, key, **kwargs):  # noqa: E501
        """Update workflow  # noqa: E501

        Update a document in the \"workflows\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_key(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowsKeyModel body: workflow to update in the collection. (required)
        :param str key: Key of the workflow. (required)
        :return: WorkflowsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_key_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_key_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_key_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Update workflow  # noqa: E501

        Update a document in the \"workflows\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_key_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param WorkflowsKeyModel body: workflow to update in the collection. (required)
        :param str key: Key of the workflow. (required)
        :return: WorkflowsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WorkflowsKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_key_cancel(self, key, **kwargs):  # noqa: E501
        """Cancel workflow.  # noqa: E501

        Cancel workflow. Workers will detect the status change and cancel jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_key_cancel(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_key_cancel_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_key_cancel_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def put_workflows_key_cancel_with_http_info(self, key, **kwargs):  # noqa: E501
        """Cancel workflow.  # noqa: E501

        Cancel workflow. Workers will detect the status change and cancel jobs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_key_cancel_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str key: Workflow key (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_key_cancel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_key_cancel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/cancel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_key_config(self, body, key, **kwargs):  # noqa: E501
        """Reports the workflow config.  # noqa: E501

        Reports the workflow config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_key_config(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param KeyConfigModel body: Updated workflow config (required)
        :param str key: Workflow key (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_key_config_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_key_config_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_key_config_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Reports the workflow config.  # noqa: E501

        Reports the workflow config.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_key_config_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param KeyConfigModel body: Updated workflow config (required)
        :param str key: Workflow key (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_key_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_key_config`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_key_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_key_status(self, body, key, **kwargs):  # noqa: E501
        """Reports the workflow status.  # noqa: E501

        Reports the workflow status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_key_status(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param KeyStatusModel body: Updated workflow status (required)
        :param str key: Workflow key (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_key_status_with_http_info(body, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_key_status_with_http_info(body, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_key_status_with_http_info(self, body, key, **kwargs):  # noqa: E501
        """Reports the workflow status.  # noqa: E501

        Reports the workflow status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_key_status_with_http_info(body, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param KeyStatusModel body: Updated workflow status (required)
        :param str key: Workflow key (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_key_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_key_status`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_key_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{key}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_aws_schedulers_key(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update AWS compute node configuration  # noqa: E501

        Update a document in the \"aws_schedulers\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_aws_schedulers_key(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param AwsSchedulersKeyModel body: AWS compute node configuration to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the AWS compute node configuration. (required)
        :return: AwsSchedulersKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_aws_schedulers_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_aws_schedulers_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_aws_schedulers_key_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update AWS compute node configuration  # noqa: E501

        Update a document in the \"aws_schedulers\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_aws_schedulers_key_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param AwsSchedulersKeyModel body: AWS compute node configuration to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the AWS compute node configuration. (required)
        :return: AwsSchedulersKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_aws_schedulers_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_workflow_aws_schedulers_key`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_aws_schedulers_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_aws_schedulers_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/aws_schedulers/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AwsSchedulersKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_compute_node_stats_key(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update compute node statistics  # noqa: E501

        Update a document in the \"compute_node_stats\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_compute_node_stats_key(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param ComputeNodeStatsKeyModel body: compute node statistics to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the compute node statistics. (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_compute_node_stats_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_compute_node_stats_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_compute_node_stats_key_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update compute node statistics  # noqa: E501

        Update a document in the \"compute_node_stats\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_compute_node_stats_key_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param ComputeNodeStatsKeyModel body: compute node statistics to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the compute node statistics. (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_compute_node_stats_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_workflow_compute_node_stats_key`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_compute_node_stats_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_compute_node_stats_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/compute_node_stats/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_compute_nodes_key(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update compute node  # noqa: E501

        Update a document in the \"compute_nodes\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_compute_nodes_key(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param ComputeNodesKeyModel body: compute node to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the compute node. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_compute_nodes_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_compute_nodes_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_compute_nodes_key_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update compute node  # noqa: E501

        Update a document in the \"compute_nodes\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_compute_nodes_key_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param ComputeNodesKeyModel body: compute node to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the compute node. (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_compute_nodes_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_workflow_compute_nodes_key`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_compute_nodes_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_compute_nodes_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/compute_nodes/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_events_key(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update event  # noqa: E501

        Update a document in the \"events\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_events_key(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param object body: event to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the event. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_events_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_events_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_events_key_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update event  # noqa: E501

        Update a document in the \"events\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_events_key_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param object body: event to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the event. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_events_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_workflow_events_key`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_events_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_events_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/events/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_files_key(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update file  # noqa: E501

        Update a document in the \"files\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_files_key(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param FilesKeyModel body: file to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the file. (required)
        :return: FilesKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_files_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_files_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_files_key_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update file  # noqa: E501

        Update a document in the \"files\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_files_key_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param FilesKeyModel body: file to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the file. (required)
        :return: FilesKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_files_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_workflow_files_key`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_files_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_files_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/files/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FilesKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_job_process_stats_key(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update job process statistics  # noqa: E501

        Update a document in the \"job_process_stats\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_job_process_stats_key(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param JobProcessStatsKeyModel body: job process statistics to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the job process statistics. (required)
        :return: JobProcessStatsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_job_process_stats_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_job_process_stats_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_job_process_stats_key_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update job process statistics  # noqa: E501

        Update a document in the \"job_process_stats\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_job_process_stats_key_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param JobProcessStatsKeyModel body: job process statistics to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the job process statistics. (required)
        :return: JobProcessStatsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_job_process_stats_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_workflow_job_process_stats_key`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_job_process_stats_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_job_process_stats_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/job_process_stats/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobProcessStatsKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_jobs_key(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update job  # noqa: E501

        Update a document in the \"jobs\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_jobs_key(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param JobsKeyModel body: job to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the job. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_jobs_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_jobs_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_jobs_key_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update job  # noqa: E501

        Update a document in the \"jobs\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_jobs_key_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param JobsKeyModel body: job to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the job. (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_jobs_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_workflow_jobs_key`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_jobs_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_jobs_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_jobs_key_manage_status_change_status_rev(self, workflow, key, status, rev, **kwargs):  # noqa: E501
        """Change the status of a job and manage side effects.  # noqa: E501

        Change the status of a job and manage side effects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_jobs_key_manage_status_change_status_rev(workflow, key, status, rev, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :param str status: New job status (required)
        :param str rev: Current job revision (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_jobs_key_manage_status_change_status_rev_with_http_info(workflow, key, status, rev, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_jobs_key_manage_status_change_status_rev_with_http_info(workflow, key, status, rev, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_jobs_key_manage_status_change_status_rev_with_http_info(self, workflow, key, status, rev, **kwargs):  # noqa: E501
        """Change the status of a job and manage side effects.  # noqa: E501

        Change the status of a job and manage side effects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_jobs_key_manage_status_change_status_rev_with_http_info(workflow, key, status, rev, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :param str status: New job status (required)
        :param str rev: Current job revision (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'status', 'rev']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_jobs_key_manage_status_change_status_rev" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_jobs_key_manage_status_change_status_rev`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_jobs_key_manage_status_change_status_rev`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `put_workflows_workflow_jobs_key_manage_status_change_status_rev`")  # noqa: E501
        # verify the required parameter 'rev' is set
        if ('rev' not in params or
                params['rev'] is None):
            raise ValueError("Missing the required parameter `rev` when calling `put_workflows_workflow_jobs_key_manage_status_change_status_rev`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501
        if 'status' in params:
            path_params['status'] = params['status']  # noqa: E501
        if 'rev' in params:
            path_params['rev'] = params['rev']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs/{key}/manage_status_change/{status}/{rev}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_jobs_key_resource_requirements_rr_key(self, workflow, key, rr_key, **kwargs):  # noqa: E501
        """Set the resource requirements for a job.  # noqa: E501

        Set the resource requirements for a job, replacing any current value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_jobs_key_resource_requirements_rr_key(workflow, key, rr_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :param str rr_key: (required)
        :return: EdgesNameModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_jobs_key_resource_requirements_rr_key_with_http_info(workflow, key, rr_key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_jobs_key_resource_requirements_rr_key_with_http_info(workflow, key, rr_key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_jobs_key_resource_requirements_rr_key_with_http_info(self, workflow, key, rr_key, **kwargs):  # noqa: E501
        """Set the resource requirements for a job.  # noqa: E501

        Set the resource requirements for a job, replacing any current value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_jobs_key_resource_requirements_rr_key_with_http_info(workflow, key, rr_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param str workflow: Workflow key (required)
        :param str key: Job key (required)
        :param str rr_key: (required)
        :return: EdgesNameModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflow', 'key', 'rr_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_jobs_key_resource_requirements_rr_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_jobs_key_resource_requirements_rr_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_jobs_key_resource_requirements_rr_key`")  # noqa: E501
        # verify the required parameter 'rr_key' is set
        if ('rr_key' not in params or
                params['rr_key'] is None):
            raise ValueError("Missing the required parameter `rr_key` when calling `put_workflows_workflow_jobs_key_resource_requirements_rr_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501
        if 'rr_key' in params:
            path_params['rr_key'] = params['rr_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/jobs/{key}/resource_requirements/{rr_key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgesNameModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_local_schedulers_key(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update local compute node configuration  # noqa: E501

        Update a document in the \"local_schedulers\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_local_schedulers_key(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param LocalSchedulersKeyModel body: local compute node configuration to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the local compute node configuration. (required)
        :return: LocalSchedulersKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_local_schedulers_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_local_schedulers_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_local_schedulers_key_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update local compute node configuration  # noqa: E501

        Update a document in the \"local_schedulers\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_local_schedulers_key_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param LocalSchedulersKeyModel body: local compute node configuration to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the local compute node configuration. (required)
        :return: LocalSchedulersKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_local_schedulers_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_workflow_local_schedulers_key`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_local_schedulers_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_local_schedulers_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/local_schedulers/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LocalSchedulersKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_resource_requirements_key(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update resource requirements  # noqa: E501

        Update a document in the \"resource_requirements\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_resource_requirements_key(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param ResourceRequirementsKeyModel body: resource requirements to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the resource requirements. (required)
        :return: ResourceRequirementsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_resource_requirements_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_resource_requirements_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_resource_requirements_key_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update resource requirements  # noqa: E501

        Update a document in the \"resource_requirements\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_resource_requirements_key_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param ResourceRequirementsKeyModel body: resource requirements to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the resource requirements. (required)
        :return: ResourceRequirementsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_resource_requirements_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_workflow_resource_requirements_key`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_resource_requirements_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_resource_requirements_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/resource_requirements/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceRequirementsKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_results_key(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update result  # noqa: E501

        Update a document in the \"results\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_results_key(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param ResultsKeyModel body: result to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the result. (required)
        :return: ResultsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_results_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_results_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_results_key_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update result  # noqa: E501

        Update a document in the \"results\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_results_key_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param ResultsKeyModel body: result to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the result. (required)
        :return: ResultsKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_results_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_workflow_results_key`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_results_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_results_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/results/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultsKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_scheduled_compute_nodes_key(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update scheduled compute node  # noqa: E501

        Update a document in the \"scheduled_compute_nodes\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_scheduled_compute_nodes_key(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param ScheduledComputeNodesKeyModel body: scheduled compute node to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the scheduled compute node. (required)
        :return: ScheduledComputeNodesKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_scheduled_compute_nodes_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_scheduled_compute_nodes_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_scheduled_compute_nodes_key_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update scheduled compute node  # noqa: E501

        Update a document in the \"scheduled_compute_nodes\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_scheduled_compute_nodes_key_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param ScheduledComputeNodesKeyModel body: scheduled compute node to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the scheduled compute node. (required)
        :return: ScheduledComputeNodesKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_scheduled_compute_nodes_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_workflow_scheduled_compute_nodes_key`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_scheduled_compute_nodes_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_scheduled_compute_nodes_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/scheduled_compute_nodes/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduledComputeNodesKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_slurm_schedulers_key(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update Slurm compute node configuration  # noqa: E501

        Update a document in the \"slurm_schedulers\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_slurm_schedulers_key(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param SlurmSchedulersKeyModel body: Slurm compute node configuration to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the Slurm compute node configuration. (required)
        :return: SlurmSchedulersKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_slurm_schedulers_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_slurm_schedulers_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_slurm_schedulers_key_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update Slurm compute node configuration  # noqa: E501

        Update a document in the \"slurm_schedulers\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_slurm_schedulers_key_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param SlurmSchedulersKeyModel body: Slurm compute node configuration to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the Slurm compute node configuration. (required)
        :return: SlurmSchedulersKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_slurm_schedulers_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_workflow_slurm_schedulers_key`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_slurm_schedulers_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_slurm_schedulers_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/slurm_schedulers/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SlurmSchedulersKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_workflows_workflow_user_data_key(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update user data  # noqa: E501

        Update a document in the \"user_data\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_user_data_key(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param UserDataKeyModel body: user data to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the user data. (required)
        :return: UserDataKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_workflows_workflow_user_data_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workflows_workflow_user_data_key_with_http_info(body, workflow, key, **kwargs)  # noqa: E501
            return data

    def put_workflows_workflow_user_data_key_with_http_info(self, body, workflow, key, **kwargs):  # noqa: E501
        """Update user data  # noqa: E501

        Update a document in the \"user_data\" collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_workflows_workflow_user_data_key_with_http_info(body, workflow, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: Set True to make the request asynchronous.
        :param UserDataKeyModel body: user data to update in the collection. (required)
        :param str workflow: Workflow key. (required)
        :param str key: key of the user data. (required)
        :return: UserDataKeyModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'workflow', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_workflows_workflow_user_data_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_workflows_workflow_user_data_key`")  # noqa: E501
        # verify the required parameter 'workflow' is set
        if ('workflow' not in params or
                params['workflow'] is None):
            raise ValueError("Missing the required parameter `workflow` when calling `put_workflows_workflow_user_data_key`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `put_workflows_workflow_user_data_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow' in params:
            path_params['workflow'] = params['workflow']  # noqa: E501
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/workflows/{workflow}/user_data/{key}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserDataKeyModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

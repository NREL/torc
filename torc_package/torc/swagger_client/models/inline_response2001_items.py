# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001Items(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hostname': 'str',
        'pid': 'int',
        'start_time': 'str',
        'duration_seconds': 'float',
        'is_active': 'bool',
        'resources': 'KeyPrepareJobsForSubmissionModel',
        'scheduler': 'object',
        'key': 'str',
        'id': 'str',
        'rev': 'str'
    }

    attribute_map = {
        'hostname': 'hostname',
        'pid': 'pid',
        'start_time': 'start_time',
        'duration_seconds': 'duration_seconds',
        'is_active': 'is_active',
        'resources': 'resources',
        'scheduler': 'scheduler',
        'key': '_key',
        'id': '_id',
        'rev': '_rev'
    }

    def __init__(self, hostname=None, pid=None, start_time=None, duration_seconds=None, is_active=None, resources=None, scheduler=None, key=None, id=None, rev=None):  # noqa: E501
        """InlineResponse2001Items - a model defined in Swagger"""  # noqa: E501
        self._hostname = None
        self._pid = None
        self._start_time = None
        self._duration_seconds = None
        self._is_active = None
        self._resources = None
        self._scheduler = None
        self._key = None
        self._id = None
        self._rev = None
        self.discriminator = None
        self.hostname = hostname
        self.pid = pid
        self.start_time = start_time
        if duration_seconds is not None:
            self.duration_seconds = duration_seconds
        if is_active is not None:
            self.is_active = is_active
        self.resources = resources
        if scheduler is not None:
            self.scheduler = scheduler
        if key is not None:
            self.key = key
        if id is not None:
            self.id = id
        if rev is not None:
            self.rev = rev

    @property
    def hostname(self):
        """Gets the hostname of this InlineResponse2001Items.  # noqa: E501


        :return: The hostname of this InlineResponse2001Items.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this InlineResponse2001Items.


        :param hostname: The hostname of this InlineResponse2001Items.  # noqa: E501
        :type: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def pid(self):
        """Gets the pid of this InlineResponse2001Items.  # noqa: E501


        :return: The pid of this InlineResponse2001Items.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this InlineResponse2001Items.


        :param pid: The pid of this InlineResponse2001Items.  # noqa: E501
        :type: int
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")  # noqa: E501

        self._pid = pid

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse2001Items.  # noqa: E501


        :return: The start_time of this InlineResponse2001Items.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse2001Items.


        :param start_time: The start_time of this InlineResponse2001Items.  # noqa: E501
        :type: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def duration_seconds(self):
        """Gets the duration_seconds of this InlineResponse2001Items.  # noqa: E501


        :return: The duration_seconds of this InlineResponse2001Items.  # noqa: E501
        :rtype: float
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """Sets the duration_seconds of this InlineResponse2001Items.


        :param duration_seconds: The duration_seconds of this InlineResponse2001Items.  # noqa: E501
        :type: float
        """

        self._duration_seconds = duration_seconds

    @property
    def is_active(self):
        """Gets the is_active of this InlineResponse2001Items.  # noqa: E501


        :return: The is_active of this InlineResponse2001Items.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this InlineResponse2001Items.


        :param is_active: The is_active of this InlineResponse2001Items.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def resources(self):
        """Gets the resources of this InlineResponse2001Items.  # noqa: E501


        :return: The resources of this InlineResponse2001Items.  # noqa: E501
        :rtype: KeyPrepareJobsForSubmissionModel
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this InlineResponse2001Items.


        :param resources: The resources of this InlineResponse2001Items.  # noqa: E501
        :type: KeyPrepareJobsForSubmissionModel
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")  # noqa: E501

        self._resources = resources

    @property
    def scheduler(self):
        """Gets the scheduler of this InlineResponse2001Items.  # noqa: E501


        :return: The scheduler of this InlineResponse2001Items.  # noqa: E501
        :rtype: object
        """
        return self._scheduler

    @scheduler.setter
    def scheduler(self, scheduler):
        """Sets the scheduler of this InlineResponse2001Items.


        :param scheduler: The scheduler of this InlineResponse2001Items.  # noqa: E501
        :type: object
        """

        self._scheduler = scheduler

    @property
    def key(self):
        """Gets the key of this InlineResponse2001Items.  # noqa: E501


        :return: The key of this InlineResponse2001Items.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this InlineResponse2001Items.


        :param key: The key of this InlineResponse2001Items.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def id(self):
        """Gets the id of this InlineResponse2001Items.  # noqa: E501


        :return: The id of this InlineResponse2001Items.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2001Items.


        :param id: The id of this InlineResponse2001Items.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rev(self):
        """Gets the rev of this InlineResponse2001Items.  # noqa: E501


        :return: The rev of this InlineResponse2001Items.  # noqa: E501
        :rtype: str
        """
        return self._rev

    @rev.setter
    def rev(self, rev):
        """Sets the rev of this InlineResponse2001Items.


        :param rev: The rev of this InlineResponse2001Items.  # noqa: E501
        :type: str
        """

        self._rev = rev

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001Items, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Items):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

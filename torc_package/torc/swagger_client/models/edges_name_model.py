# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgesNameModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'str',
        'to': 'str',
        'key': 'str',
        'id': 'str',
        'rev': 'str'
    }

    attribute_map = {
        '_from': '_from',
        'to': '_to',
        'key': '_key',
        'id': '_id',
        'rev': '_rev'
    }

    def __init__(self, _from=None, to=None, key=None, id=None, rev=None):  # noqa: E501
        """EdgesNameModel - a model defined in Swagger"""  # noqa: E501
        self.__from = None
        self._to = None
        self._key = None
        self._id = None
        self._rev = None
        self.discriminator = None
        self._from = _from
        self.to = to
        if key is not None:
            self.key = key
        if id is not None:
            self.id = id
        if rev is not None:
            self.rev = rev

    @property
    def _from(self):
        """Gets the _from of this EdgesNameModel.  # noqa: E501


        :return: The _from of this EdgesNameModel.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EdgesNameModel.


        :param _from: The _from of this EdgesNameModel.  # noqa: E501
        :type: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this EdgesNameModel.  # noqa: E501


        :return: The to of this EdgesNameModel.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this EdgesNameModel.


        :param to: The to of this EdgesNameModel.  # noqa: E501
        :type: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def key(self):
        """Gets the key of this EdgesNameModel.  # noqa: E501


        :return: The key of this EdgesNameModel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this EdgesNameModel.


        :param key: The key of this EdgesNameModel.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def id(self):
        """Gets the id of this EdgesNameModel.  # noqa: E501


        :return: The id of this EdgesNameModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdgesNameModel.


        :param id: The id of this EdgesNameModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rev(self):
        """Gets the rev of this EdgesNameModel.  # noqa: E501


        :return: The rev of this EdgesNameModel.  # noqa: E501
        :rtype: str
        """
        return self._rev

    @rev.setter
    def rev(self, rev):
        """Sets the rev of this EdgesNameModel.


        :param rev: The rev of this EdgesNameModel.  # noqa: E501
        :type: str
        """

        self._rev = rev

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgesNameModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgesNameModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

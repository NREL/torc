# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowSlurmSchedulersModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'account': 'str',
        'gres': 'str',
        'mem': 'str',
        'nodes': 'int',
        'partition': 'str',
        'qos': 'str',
        'tmp': 'str',
        'walltime': 'str',
        'extra': 'object',
        'key': 'str',
        'id': 'str',
        'rev': 'str'
    }

    attribute_map = {
        'name': 'name',
        'account': 'account',
        'gres': 'gres',
        'mem': 'mem',
        'nodes': 'nodes',
        'partition': 'partition',
        'qos': 'qos',
        'tmp': 'tmp',
        'walltime': 'walltime',
        'extra': 'extra',
        'key': '_key',
        'id': '_id',
        'rev': '_rev'
    }

    def __init__(self, name=None, account=None, gres=None, mem=None, nodes=None, partition=None, qos='normal', tmp=None, walltime=None, extra=None, key=None, id=None, rev=None):  # noqa: E501
        """WorkflowSlurmSchedulersModel - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._account = None
        self._gres = None
        self._mem = None
        self._nodes = None
        self._partition = None
        self._qos = None
        self._tmp = None
        self._walltime = None
        self._extra = None
        self._key = None
        self._id = None
        self._rev = None
        self.discriminator = None
        if name is not None:
            self.name = name
        self.account = account
        if gres is not None:
            self.gres = gres
        if mem is not None:
            self.mem = mem
        self.nodes = nodes
        if partition is not None:
            self.partition = partition
        if qos is not None:
            self.qos = qos
        if tmp is not None:
            self.tmp = tmp
        if walltime is not None:
            self.walltime = walltime
        if extra is not None:
            self.extra = extra
        if key is not None:
            self.key = key
        if id is not None:
            self.id = id
        if rev is not None:
            self.rev = rev

    @property
    def name(self):
        """Gets the name of this WorkflowSlurmSchedulersModel.  # noqa: E501


        :return: The name of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowSlurmSchedulersModel.


        :param name: The name of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def account(self):
        """Gets the account of this WorkflowSlurmSchedulersModel.  # noqa: E501


        :return: The account of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this WorkflowSlurmSchedulersModel.


        :param account: The account of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :type: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def gres(self):
        """Gets the gres of this WorkflowSlurmSchedulersModel.  # noqa: E501


        :return: The gres of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :rtype: str
        """
        return self._gres

    @gres.setter
    def gres(self, gres):
        """Sets the gres of this WorkflowSlurmSchedulersModel.


        :param gres: The gres of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :type: str
        """

        self._gres = gres

    @property
    def mem(self):
        """Gets the mem of this WorkflowSlurmSchedulersModel.  # noqa: E501


        :return: The mem of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :rtype: str
        """
        return self._mem

    @mem.setter
    def mem(self, mem):
        """Sets the mem of this WorkflowSlurmSchedulersModel.


        :param mem: The mem of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :type: str
        """

        self._mem = mem

    @property
    def nodes(self):
        """Gets the nodes of this WorkflowSlurmSchedulersModel.  # noqa: E501


        :return: The nodes of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :rtype: int
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this WorkflowSlurmSchedulersModel.


        :param nodes: The nodes of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :type: int
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def partition(self):
        """Gets the partition of this WorkflowSlurmSchedulersModel.  # noqa: E501


        :return: The partition of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this WorkflowSlurmSchedulersModel.


        :param partition: The partition of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def qos(self):
        """Gets the qos of this WorkflowSlurmSchedulersModel.  # noqa: E501


        :return: The qos of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :rtype: str
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this WorkflowSlurmSchedulersModel.


        :param qos: The qos of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :type: str
        """

        self._qos = qos

    @property
    def tmp(self):
        """Gets the tmp of this WorkflowSlurmSchedulersModel.  # noqa: E501


        :return: The tmp of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :rtype: str
        """
        return self._tmp

    @tmp.setter
    def tmp(self, tmp):
        """Sets the tmp of this WorkflowSlurmSchedulersModel.


        :param tmp: The tmp of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :type: str
        """

        self._tmp = tmp

    @property
    def walltime(self):
        """Gets the walltime of this WorkflowSlurmSchedulersModel.  # noqa: E501


        :return: The walltime of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :rtype: str
        """
        return self._walltime

    @walltime.setter
    def walltime(self, walltime):
        """Sets the walltime of this WorkflowSlurmSchedulersModel.


        :param walltime: The walltime of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :type: str
        """

        self._walltime = walltime

    @property
    def extra(self):
        """Gets the extra of this WorkflowSlurmSchedulersModel.  # noqa: E501


        :return: The extra of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this WorkflowSlurmSchedulersModel.


        :param extra: The extra of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :type: object
        """

        self._extra = extra

    @property
    def key(self):
        """Gets the key of this WorkflowSlurmSchedulersModel.  # noqa: E501


        :return: The key of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this WorkflowSlurmSchedulersModel.


        :param key: The key of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def id(self):
        """Gets the id of this WorkflowSlurmSchedulersModel.  # noqa: E501


        :return: The id of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowSlurmSchedulersModel.


        :param id: The id of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rev(self):
        """Gets the rev of this WorkflowSlurmSchedulersModel.  # noqa: E501


        :return: The rev of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :rtype: str
        """
        return self._rev

    @rev.setter
    def rev(self, rev):
        """Sets the rev of this WorkflowSlurmSchedulersModel.


        :param rev: The rev of this WorkflowSlurmSchedulersModel.  # noqa: E501
        :type: str
        """

        self._rev = rev

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowSlurmSchedulersModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowSlurmSchedulersModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'command': 'str',
        'invocation_script': 'object',
        'status': 'str',
        'needs_compute_node_schedule': 'bool',
        'cancel_on_blocking_job_failure': 'bool',
        'supports_termination': 'bool',
        'internal': 'WorkflowsworkflowjobsInternal',
        'key': 'str',
        'id': 'str',
        'rev': 'str'
    }

    attribute_map = {
        'name': 'name',
        'command': 'command',
        'invocation_script': 'invocation_script',
        'status': 'status',
        'needs_compute_node_schedule': 'needs_compute_node_schedule',
        'cancel_on_blocking_job_failure': 'cancel_on_blocking_job_failure',
        'supports_termination': 'supports_termination',
        'internal': 'internal',
        'key': '_key',
        'id': '_id',
        'rev': '_rev'
    }

    def __init__(self, name=None, command=None, invocation_script=None, status=None, needs_compute_node_schedule=False, cancel_on_blocking_job_failure=True, supports_termination=False, internal=None, key=None, id=None, rev=None):  # noqa: E501
        """InlineResponse2008 - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._command = None
        self._invocation_script = None
        self._status = None
        self._needs_compute_node_schedule = None
        self._cancel_on_blocking_job_failure = None
        self._supports_termination = None
        self._internal = None
        self._key = None
        self._id = None
        self._rev = None
        self.discriminator = None
        if name is not None:
            self.name = name
        self.command = command
        if invocation_script is not None:
            self.invocation_script = invocation_script
        if status is not None:
            self.status = status
        if needs_compute_node_schedule is not None:
            self.needs_compute_node_schedule = needs_compute_node_schedule
        if cancel_on_blocking_job_failure is not None:
            self.cancel_on_blocking_job_failure = cancel_on_blocking_job_failure
        if supports_termination is not None:
            self.supports_termination = supports_termination
        if internal is not None:
            self.internal = internal
        if key is not None:
            self.key = key
        if id is not None:
            self.id = id
        if rev is not None:
            self.rev = rev

    @property
    def name(self):
        """Gets the name of this InlineResponse2008.  # noqa: E501


        :return: The name of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2008.


        :param name: The name of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def command(self):
        """Gets the command of this InlineResponse2008.  # noqa: E501


        :return: The command of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this InlineResponse2008.


        :param command: The command of this InlineResponse2008.  # noqa: E501
        :type: str
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")  # noqa: E501

        self._command = command

    @property
    def invocation_script(self):
        """Gets the invocation_script of this InlineResponse2008.  # noqa: E501


        :return: The invocation_script of this InlineResponse2008.  # noqa: E501
        :rtype: object
        """
        return self._invocation_script

    @invocation_script.setter
    def invocation_script(self, invocation_script):
        """Sets the invocation_script of this InlineResponse2008.


        :param invocation_script: The invocation_script of this InlineResponse2008.  # noqa: E501
        :type: object
        """

        self._invocation_script = invocation_script

    @property
    def status(self):
        """Gets the status of this InlineResponse2008.  # noqa: E501


        :return: The status of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2008.


        :param status: The status of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def needs_compute_node_schedule(self):
        """Gets the needs_compute_node_schedule of this InlineResponse2008.  # noqa: E501


        :return: The needs_compute_node_schedule of this InlineResponse2008.  # noqa: E501
        :rtype: bool
        """
        return self._needs_compute_node_schedule

    @needs_compute_node_schedule.setter
    def needs_compute_node_schedule(self, needs_compute_node_schedule):
        """Sets the needs_compute_node_schedule of this InlineResponse2008.


        :param needs_compute_node_schedule: The needs_compute_node_schedule of this InlineResponse2008.  # noqa: E501
        :type: bool
        """

        self._needs_compute_node_schedule = needs_compute_node_schedule

    @property
    def cancel_on_blocking_job_failure(self):
        """Gets the cancel_on_blocking_job_failure of this InlineResponse2008.  # noqa: E501


        :return: The cancel_on_blocking_job_failure of this InlineResponse2008.  # noqa: E501
        :rtype: bool
        """
        return self._cancel_on_blocking_job_failure

    @cancel_on_blocking_job_failure.setter
    def cancel_on_blocking_job_failure(self, cancel_on_blocking_job_failure):
        """Sets the cancel_on_blocking_job_failure of this InlineResponse2008.


        :param cancel_on_blocking_job_failure: The cancel_on_blocking_job_failure of this InlineResponse2008.  # noqa: E501
        :type: bool
        """

        self._cancel_on_blocking_job_failure = cancel_on_blocking_job_failure

    @property
    def supports_termination(self):
        """Gets the supports_termination of this InlineResponse2008.  # noqa: E501


        :return: The supports_termination of this InlineResponse2008.  # noqa: E501
        :rtype: bool
        """
        return self._supports_termination

    @supports_termination.setter
    def supports_termination(self, supports_termination):
        """Sets the supports_termination of this InlineResponse2008.


        :param supports_termination: The supports_termination of this InlineResponse2008.  # noqa: E501
        :type: bool
        """

        self._supports_termination = supports_termination

    @property
    def internal(self):
        """Gets the internal of this InlineResponse2008.  # noqa: E501


        :return: The internal of this InlineResponse2008.  # noqa: E501
        :rtype: WorkflowsworkflowjobsInternal
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this InlineResponse2008.


        :param internal: The internal of this InlineResponse2008.  # noqa: E501
        :type: WorkflowsworkflowjobsInternal
        """

        self._internal = internal

    @property
    def key(self):
        """Gets the key of this InlineResponse2008.  # noqa: E501


        :return: The key of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this InlineResponse2008.


        :param key: The key of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def id(self):
        """Gets the id of this InlineResponse2008.  # noqa: E501


        :return: The id of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2008.


        :param id: The id of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rev(self):
        """Gets the rev of this InlineResponse2008.  # noqa: E501


        :return: The rev of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._rev

    @rev.setter
    def rev(self, rev):
        """Sets the rev of this InlineResponse2008.


        :param rev: The rev of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._rev = rev

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

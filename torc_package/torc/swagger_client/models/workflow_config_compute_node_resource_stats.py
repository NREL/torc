# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowConfigComputeNodeResourceStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu': 'bool',
        'disk': 'bool',
        'memory': 'bool',
        'network': 'bool',
        'process': 'bool',
        'include_child_processes': 'bool',
        'recurse_child_processes': 'bool',
        'monitor_type': 'str',
        'make_plots': 'bool',
        'interval': 'float'
    }

    attribute_map = {
        'cpu': 'cpu',
        'disk': 'disk',
        'memory': 'memory',
        'network': 'network',
        'process': 'process',
        'include_child_processes': 'include_child_processes',
        'recurse_child_processes': 'recurse_child_processes',
        'monitor_type': 'monitor_type',
        'make_plots': 'make_plots',
        'interval': 'interval'
    }

    def __init__(self, cpu=True, disk=False, memory=True, network=False, process=False, include_child_processes=True, recurse_child_processes=False, monitor_type='aggregation', make_plots=True, interval=None):  # noqa: E501
        """WorkflowConfigComputeNodeResourceStats - a model defined in Swagger"""  # noqa: E501
        self._cpu = None
        self._disk = None
        self._memory = None
        self._network = None
        self._process = None
        self._include_child_processes = None
        self._recurse_child_processes = None
        self._monitor_type = None
        self._make_plots = None
        self._interval = None
        self.discriminator = None
        if cpu is not None:
            self.cpu = cpu
        if disk is not None:
            self.disk = disk
        if memory is not None:
            self.memory = memory
        if network is not None:
            self.network = network
        if process is not None:
            self.process = process
        if include_child_processes is not None:
            self.include_child_processes = include_child_processes
        if recurse_child_processes is not None:
            self.recurse_child_processes = recurse_child_processes
        if monitor_type is not None:
            self.monitor_type = monitor_type
        if make_plots is not None:
            self.make_plots = make_plots
        if interval is not None:
            self.interval = interval

    @property
    def cpu(self):
        """Gets the cpu of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501


        :return: The cpu of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :rtype: bool
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this WorkflowConfigComputeNodeResourceStats.


        :param cpu: The cpu of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :type: bool
        """

        self._cpu = cpu

    @property
    def disk(self):
        """Gets the disk of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501


        :return: The disk of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :rtype: bool
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this WorkflowConfigComputeNodeResourceStats.


        :param disk: The disk of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :type: bool
        """

        self._disk = disk

    @property
    def memory(self):
        """Gets the memory of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501


        :return: The memory of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :rtype: bool
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this WorkflowConfigComputeNodeResourceStats.


        :param memory: The memory of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :type: bool
        """

        self._memory = memory

    @property
    def network(self):
        """Gets the network of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501


        :return: The network of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :rtype: bool
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this WorkflowConfigComputeNodeResourceStats.


        :param network: The network of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :type: bool
        """

        self._network = network

    @property
    def process(self):
        """Gets the process of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501


        :return: The process of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :rtype: bool
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this WorkflowConfigComputeNodeResourceStats.


        :param process: The process of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :type: bool
        """

        self._process = process

    @property
    def include_child_processes(self):
        """Gets the include_child_processes of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501


        :return: The include_child_processes of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :rtype: bool
        """
        return self._include_child_processes

    @include_child_processes.setter
    def include_child_processes(self, include_child_processes):
        """Sets the include_child_processes of this WorkflowConfigComputeNodeResourceStats.


        :param include_child_processes: The include_child_processes of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :type: bool
        """

        self._include_child_processes = include_child_processes

    @property
    def recurse_child_processes(self):
        """Gets the recurse_child_processes of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501


        :return: The recurse_child_processes of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :rtype: bool
        """
        return self._recurse_child_processes

    @recurse_child_processes.setter
    def recurse_child_processes(self, recurse_child_processes):
        """Sets the recurse_child_processes of this WorkflowConfigComputeNodeResourceStats.


        :param recurse_child_processes: The recurse_child_processes of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :type: bool
        """

        self._recurse_child_processes = recurse_child_processes

    @property
    def monitor_type(self):
        """Gets the monitor_type of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501


        :return: The monitor_type of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :rtype: str
        """
        return self._monitor_type

    @monitor_type.setter
    def monitor_type(self, monitor_type):
        """Sets the monitor_type of this WorkflowConfigComputeNodeResourceStats.


        :param monitor_type: The monitor_type of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :type: str
        """

        self._monitor_type = monitor_type

    @property
    def make_plots(self):
        """Gets the make_plots of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501


        :return: The make_plots of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :rtype: bool
        """
        return self._make_plots

    @make_plots.setter
    def make_plots(self, make_plots):
        """Sets the make_plots of this WorkflowConfigComputeNodeResourceStats.


        :param make_plots: The make_plots of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :type: bool
        """

        self._make_plots = make_plots

    @property
    def interval(self):
        """Gets the interval of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501


        :return: The interval of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :rtype: float
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this WorkflowConfigComputeNodeResourceStats.


        :param interval: The interval of this WorkflowConfigComputeNodeResourceStats.  # noqa: E501
        :type: float
        """

        self._interval = interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowConfigComputeNodeResourceStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowConfigComputeNodeResourceStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

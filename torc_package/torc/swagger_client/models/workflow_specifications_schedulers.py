# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowSpecificationsSchedulers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aws_schedulers': 'list[AwsSchedulersKeyModel]',
        'local_schedulers': 'list[LocalSchedulersKeyModel]',
        'slurm_schedulers': 'list[SlurmSchedulersKeyModel]'
    }

    attribute_map = {
        'aws_schedulers': 'aws_schedulers',
        'local_schedulers': 'local_schedulers',
        'slurm_schedulers': 'slurm_schedulers'
    }

    def __init__(self, aws_schedulers=None, local_schedulers=None, slurm_schedulers=None):  # noqa: E501
        """WorkflowSpecificationsSchedulers - a model defined in Swagger"""  # noqa: E501
        self._aws_schedulers = None
        self._local_schedulers = None
        self._slurm_schedulers = None
        self.discriminator = None
        if aws_schedulers is not None:
            self.aws_schedulers = aws_schedulers
        if local_schedulers is not None:
            self.local_schedulers = local_schedulers
        if slurm_schedulers is not None:
            self.slurm_schedulers = slurm_schedulers

    @property
    def aws_schedulers(self):
        """Gets the aws_schedulers of this WorkflowSpecificationsSchedulers.  # noqa: E501


        :return: The aws_schedulers of this WorkflowSpecificationsSchedulers.  # noqa: E501
        :rtype: list[AwsSchedulersKeyModel]
        """
        return self._aws_schedulers

    @aws_schedulers.setter
    def aws_schedulers(self, aws_schedulers):
        """Sets the aws_schedulers of this WorkflowSpecificationsSchedulers.


        :param aws_schedulers: The aws_schedulers of this WorkflowSpecificationsSchedulers.  # noqa: E501
        :type: list[AwsSchedulersKeyModel]
        """

        self._aws_schedulers = aws_schedulers

    @property
    def local_schedulers(self):
        """Gets the local_schedulers of this WorkflowSpecificationsSchedulers.  # noqa: E501


        :return: The local_schedulers of this WorkflowSpecificationsSchedulers.  # noqa: E501
        :rtype: list[LocalSchedulersKeyModel]
        """
        return self._local_schedulers

    @local_schedulers.setter
    def local_schedulers(self, local_schedulers):
        """Sets the local_schedulers of this WorkflowSpecificationsSchedulers.


        :param local_schedulers: The local_schedulers of this WorkflowSpecificationsSchedulers.  # noqa: E501
        :type: list[LocalSchedulersKeyModel]
        """

        self._local_schedulers = local_schedulers

    @property
    def slurm_schedulers(self):
        """Gets the slurm_schedulers of this WorkflowSpecificationsSchedulers.  # noqa: E501


        :return: The slurm_schedulers of this WorkflowSpecificationsSchedulers.  # noqa: E501
        :rtype: list[SlurmSchedulersKeyModel]
        """
        return self._slurm_schedulers

    @slurm_schedulers.setter
    def slurm_schedulers(self, slurm_schedulers):
        """Sets the slurm_schedulers of this WorkflowSpecificationsSchedulers.


        :param slurm_schedulers: The slurm_schedulers of this WorkflowSpecificationsSchedulers.  # noqa: E501
        :type: list[SlurmSchedulersKeyModel]
        """

        self._slurm_schedulers = slurm_schedulers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowSpecificationsSchedulers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowSpecificationsSchedulers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

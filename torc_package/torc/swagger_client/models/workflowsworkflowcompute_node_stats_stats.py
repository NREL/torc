# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowsworkflowcomputeNodeStatsStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'average': 'object',
        'minimum': 'object',
        'maximum': 'object',
        'num_samples': 'int',
        'job_key': 'str'
    }

    attribute_map = {
        'resource_type': 'resource_type',
        'average': 'average',
        'minimum': 'minimum',
        'maximum': 'maximum',
        'num_samples': 'num_samples',
        'job_key': 'job_key'
    }

    def __init__(self, resource_type=None, average=None, minimum=None, maximum=None, num_samples=None, job_key=None):  # noqa: E501
        """WorkflowsworkflowcomputeNodeStatsStats - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._average = None
        self._minimum = None
        self._maximum = None
        self._num_samples = None
        self._job_key = None
        self.discriminator = None
        self.resource_type = resource_type
        self.average = average
        self.minimum = minimum
        self.maximum = maximum
        self.num_samples = num_samples
        if job_key is not None:
            self.job_key = job_key

    @property
    def resource_type(self):
        """Gets the resource_type of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501


        :return: The resource_type of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this WorkflowsworkflowcomputeNodeStatsStats.


        :param resource_type: The resource_type of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def average(self):
        """Gets the average of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501


        :return: The average of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501
        :rtype: object
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this WorkflowsworkflowcomputeNodeStatsStats.


        :param average: The average of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501
        :type: object
        """
        if average is None:
            raise ValueError("Invalid value for `average`, must not be `None`")  # noqa: E501

        self._average = average

    @property
    def minimum(self):
        """Gets the minimum of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501


        :return: The minimum of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501
        :rtype: object
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this WorkflowsworkflowcomputeNodeStatsStats.


        :param minimum: The minimum of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501
        :type: object
        """
        if minimum is None:
            raise ValueError("Invalid value for `minimum`, must not be `None`")  # noqa: E501

        self._minimum = minimum

    @property
    def maximum(self):
        """Gets the maximum of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501


        :return: The maximum of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501
        :rtype: object
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this WorkflowsworkflowcomputeNodeStatsStats.


        :param maximum: The maximum of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501
        :type: object
        """
        if maximum is None:
            raise ValueError("Invalid value for `maximum`, must not be `None`")  # noqa: E501

        self._maximum = maximum

    @property
    def num_samples(self):
        """Gets the num_samples of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501


        :return: The num_samples of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501
        :rtype: int
        """
        return self._num_samples

    @num_samples.setter
    def num_samples(self, num_samples):
        """Sets the num_samples of this WorkflowsworkflowcomputeNodeStatsStats.


        :param num_samples: The num_samples of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501
        :type: int
        """
        if num_samples is None:
            raise ValueError("Invalid value for `num_samples`, must not be `None`")  # noqa: E501

        self._num_samples = num_samples

    @property
    def job_key(self):
        """Gets the job_key of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501


        :return: The job_key of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501
        :rtype: str
        """
        return self._job_key

    @job_key.setter
    def job_key(self, job_key):
        """Sets the job_key of this WorkflowsworkflowcomputeNodeStatsStats.


        :param job_key: The job_key of this WorkflowsworkflowcomputeNodeStatsStats.  # noqa: E501
        :type: str
        """

        self._job_key = job_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowsworkflowcomputeNodeStatsStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowsworkflowcomputeNodeStatsStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

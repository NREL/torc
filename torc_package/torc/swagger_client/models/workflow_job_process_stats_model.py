# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowJobProcessStatsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_key': 'str',
        'run_id': 'int',
        'avg_cpu_percent': 'float',
        'max_cpu_percent': 'float',
        'avg_rss': 'float',
        'max_rss': 'float',
        'num_samples': 'int',
        'timestamp': 'str',
        'key': 'str',
        'id': 'str',
        'rev': 'str'
    }

    attribute_map = {
        'job_key': 'job_key',
        'run_id': 'run_id',
        'avg_cpu_percent': 'avg_cpu_percent',
        'max_cpu_percent': 'max_cpu_percent',
        'avg_rss': 'avg_rss',
        'max_rss': 'max_rss',
        'num_samples': 'num_samples',
        'timestamp': 'timestamp',
        'key': '_key',
        'id': '_id',
        'rev': '_rev'
    }

    def __init__(self, job_key=None, run_id=None, avg_cpu_percent=None, max_cpu_percent=None, avg_rss=None, max_rss=None, num_samples=None, timestamp=None, key=None, id=None, rev=None):  # noqa: E501
        """WorkflowJobProcessStatsModel - a model defined in Swagger"""  # noqa: E501
        self._job_key = None
        self._run_id = None
        self._avg_cpu_percent = None
        self._max_cpu_percent = None
        self._avg_rss = None
        self._max_rss = None
        self._num_samples = None
        self._timestamp = None
        self._key = None
        self._id = None
        self._rev = None
        self.discriminator = None
        self.job_key = job_key
        self.run_id = run_id
        self.avg_cpu_percent = avg_cpu_percent
        self.max_cpu_percent = max_cpu_percent
        self.avg_rss = avg_rss
        self.max_rss = max_rss
        self.num_samples = num_samples
        self.timestamp = timestamp
        if key is not None:
            self.key = key
        if id is not None:
            self.id = id
        if rev is not None:
            self.rev = rev

    @property
    def job_key(self):
        """Gets the job_key of this WorkflowJobProcessStatsModel.  # noqa: E501


        :return: The job_key of this WorkflowJobProcessStatsModel.  # noqa: E501
        :rtype: str
        """
        return self._job_key

    @job_key.setter
    def job_key(self, job_key):
        """Sets the job_key of this WorkflowJobProcessStatsModel.


        :param job_key: The job_key of this WorkflowJobProcessStatsModel.  # noqa: E501
        :type: str
        """
        if job_key is None:
            raise ValueError("Invalid value for `job_key`, must not be `None`")  # noqa: E501

        self._job_key = job_key

    @property
    def run_id(self):
        """Gets the run_id of this WorkflowJobProcessStatsModel.  # noqa: E501


        :return: The run_id of this WorkflowJobProcessStatsModel.  # noqa: E501
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this WorkflowJobProcessStatsModel.


        :param run_id: The run_id of this WorkflowJobProcessStatsModel.  # noqa: E501
        :type: int
        """
        if run_id is None:
            raise ValueError("Invalid value for `run_id`, must not be `None`")  # noqa: E501

        self._run_id = run_id

    @property
    def avg_cpu_percent(self):
        """Gets the avg_cpu_percent of this WorkflowJobProcessStatsModel.  # noqa: E501


        :return: The avg_cpu_percent of this WorkflowJobProcessStatsModel.  # noqa: E501
        :rtype: float
        """
        return self._avg_cpu_percent

    @avg_cpu_percent.setter
    def avg_cpu_percent(self, avg_cpu_percent):
        """Sets the avg_cpu_percent of this WorkflowJobProcessStatsModel.


        :param avg_cpu_percent: The avg_cpu_percent of this WorkflowJobProcessStatsModel.  # noqa: E501
        :type: float
        """
        if avg_cpu_percent is None:
            raise ValueError("Invalid value for `avg_cpu_percent`, must not be `None`")  # noqa: E501

        self._avg_cpu_percent = avg_cpu_percent

    @property
    def max_cpu_percent(self):
        """Gets the max_cpu_percent of this WorkflowJobProcessStatsModel.  # noqa: E501


        :return: The max_cpu_percent of this WorkflowJobProcessStatsModel.  # noqa: E501
        :rtype: float
        """
        return self._max_cpu_percent

    @max_cpu_percent.setter
    def max_cpu_percent(self, max_cpu_percent):
        """Sets the max_cpu_percent of this WorkflowJobProcessStatsModel.


        :param max_cpu_percent: The max_cpu_percent of this WorkflowJobProcessStatsModel.  # noqa: E501
        :type: float
        """
        if max_cpu_percent is None:
            raise ValueError("Invalid value for `max_cpu_percent`, must not be `None`")  # noqa: E501

        self._max_cpu_percent = max_cpu_percent

    @property
    def avg_rss(self):
        """Gets the avg_rss of this WorkflowJobProcessStatsModel.  # noqa: E501


        :return: The avg_rss of this WorkflowJobProcessStatsModel.  # noqa: E501
        :rtype: float
        """
        return self._avg_rss

    @avg_rss.setter
    def avg_rss(self, avg_rss):
        """Sets the avg_rss of this WorkflowJobProcessStatsModel.


        :param avg_rss: The avg_rss of this WorkflowJobProcessStatsModel.  # noqa: E501
        :type: float
        """
        if avg_rss is None:
            raise ValueError("Invalid value for `avg_rss`, must not be `None`")  # noqa: E501

        self._avg_rss = avg_rss

    @property
    def max_rss(self):
        """Gets the max_rss of this WorkflowJobProcessStatsModel.  # noqa: E501


        :return: The max_rss of this WorkflowJobProcessStatsModel.  # noqa: E501
        :rtype: float
        """
        return self._max_rss

    @max_rss.setter
    def max_rss(self, max_rss):
        """Sets the max_rss of this WorkflowJobProcessStatsModel.


        :param max_rss: The max_rss of this WorkflowJobProcessStatsModel.  # noqa: E501
        :type: float
        """
        if max_rss is None:
            raise ValueError("Invalid value for `max_rss`, must not be `None`")  # noqa: E501

        self._max_rss = max_rss

    @property
    def num_samples(self):
        """Gets the num_samples of this WorkflowJobProcessStatsModel.  # noqa: E501


        :return: The num_samples of this WorkflowJobProcessStatsModel.  # noqa: E501
        :rtype: int
        """
        return self._num_samples

    @num_samples.setter
    def num_samples(self, num_samples):
        """Sets the num_samples of this WorkflowJobProcessStatsModel.


        :param num_samples: The num_samples of this WorkflowJobProcessStatsModel.  # noqa: E501
        :type: int
        """
        if num_samples is None:
            raise ValueError("Invalid value for `num_samples`, must not be `None`")  # noqa: E501

        self._num_samples = num_samples

    @property
    def timestamp(self):
        """Gets the timestamp of this WorkflowJobProcessStatsModel.  # noqa: E501


        :return: The timestamp of this WorkflowJobProcessStatsModel.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this WorkflowJobProcessStatsModel.


        :param timestamp: The timestamp of this WorkflowJobProcessStatsModel.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def key(self):
        """Gets the key of this WorkflowJobProcessStatsModel.  # noqa: E501


        :return: The key of this WorkflowJobProcessStatsModel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this WorkflowJobProcessStatsModel.


        :param key: The key of this WorkflowJobProcessStatsModel.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def id(self):
        """Gets the id of this WorkflowJobProcessStatsModel.  # noqa: E501


        :return: The id of this WorkflowJobProcessStatsModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowJobProcessStatsModel.


        :param id: The id of this WorkflowJobProcessStatsModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rev(self):
        """Gets the rev of this WorkflowJobProcessStatsModel.  # noqa: E501


        :return: The rev of this WorkflowJobProcessStatsModel.  # noqa: E501
        :rtype: str
        """
        return self._rev

    @rev.setter
    def rev(self, rev):
        """Sets the rev of this WorkflowJobProcessStatsModel.


        :param rev: The rev of this WorkflowJobProcessStatsModel.  # noqa: E501
        :type: str
        """

        self._rev = rev

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowJobProcessStatsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowJobProcessStatsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowJobSpecificationsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'key': 'str',
        'command': 'str',
        'invocation_script': 'object',
        'cancel_on_blocking_job_failure': 'bool',
        'supports_termination': 'bool',
        'scheduler': 'object',
        'needs_compute_node_schedule': 'bool',
        'consumes_user_data': 'list[str]',
        'stores_user_data': 'list[str]',
        'resource_requirements': 'str',
        'input_files': 'list[str]',
        'output_files': 'list[str]',
        'blocked_by': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'key': 'key',
        'command': 'command',
        'invocation_script': 'invocation_script',
        'cancel_on_blocking_job_failure': 'cancel_on_blocking_job_failure',
        'supports_termination': 'supports_termination',
        'scheduler': 'scheduler',
        'needs_compute_node_schedule': 'needs_compute_node_schedule',
        'consumes_user_data': 'consumes_user_data',
        'stores_user_data': 'stores_user_data',
        'resource_requirements': 'resource_requirements',
        'input_files': 'input_files',
        'output_files': 'output_files',
        'blocked_by': 'blocked_by'
    }

    def __init__(self, name=None, key=None, command=None, invocation_script=None, cancel_on_blocking_job_failure=True, supports_termination=False, scheduler=None, needs_compute_node_schedule=False, consumes_user_data=None, stores_user_data=None, resource_requirements=None, input_files=None, output_files=None, blocked_by=None):  # noqa: E501
        """WorkflowJobSpecificationsModel - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._key = None
        self._command = None
        self._invocation_script = None
        self._cancel_on_blocking_job_failure = None
        self._supports_termination = None
        self._scheduler = None
        self._needs_compute_node_schedule = None
        self._consumes_user_data = None
        self._stores_user_data = None
        self._resource_requirements = None
        self._input_files = None
        self._output_files = None
        self._blocked_by = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if key is not None:
            self.key = key
        self.command = command
        if invocation_script is not None:
            self.invocation_script = invocation_script
        if cancel_on_blocking_job_failure is not None:
            self.cancel_on_blocking_job_failure = cancel_on_blocking_job_failure
        if supports_termination is not None:
            self.supports_termination = supports_termination
        if scheduler is not None:
            self.scheduler = scheduler
        if needs_compute_node_schedule is not None:
            self.needs_compute_node_schedule = needs_compute_node_schedule
        if consumes_user_data is not None:
            self.consumes_user_data = consumes_user_data
        if stores_user_data is not None:
            self.stores_user_data = stores_user_data
        if resource_requirements is not None:
            self.resource_requirements = resource_requirements
        if input_files is not None:
            self.input_files = input_files
        if output_files is not None:
            self.output_files = output_files
        if blocked_by is not None:
            self.blocked_by = blocked_by

    @property
    def name(self):
        """Gets the name of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The name of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowJobSpecificationsModel.


        :param name: The name of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def key(self):
        """Gets the key of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The key of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this WorkflowJobSpecificationsModel.


        :param key: The key of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def command(self):
        """Gets the command of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The command of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this WorkflowJobSpecificationsModel.


        :param command: The command of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: str
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")  # noqa: E501

        self._command = command

    @property
    def invocation_script(self):
        """Gets the invocation_script of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The invocation_script of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: object
        """
        return self._invocation_script

    @invocation_script.setter
    def invocation_script(self, invocation_script):
        """Sets the invocation_script of this WorkflowJobSpecificationsModel.


        :param invocation_script: The invocation_script of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: object
        """

        self._invocation_script = invocation_script

    @property
    def cancel_on_blocking_job_failure(self):
        """Gets the cancel_on_blocking_job_failure of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The cancel_on_blocking_job_failure of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: bool
        """
        return self._cancel_on_blocking_job_failure

    @cancel_on_blocking_job_failure.setter
    def cancel_on_blocking_job_failure(self, cancel_on_blocking_job_failure):
        """Sets the cancel_on_blocking_job_failure of this WorkflowJobSpecificationsModel.


        :param cancel_on_blocking_job_failure: The cancel_on_blocking_job_failure of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: bool
        """

        self._cancel_on_blocking_job_failure = cancel_on_blocking_job_failure

    @property
    def supports_termination(self):
        """Gets the supports_termination of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The supports_termination of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: bool
        """
        return self._supports_termination

    @supports_termination.setter
    def supports_termination(self, supports_termination):
        """Sets the supports_termination of this WorkflowJobSpecificationsModel.


        :param supports_termination: The supports_termination of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: bool
        """

        self._supports_termination = supports_termination

    @property
    def scheduler(self):
        """Gets the scheduler of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The scheduler of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: object
        """
        return self._scheduler

    @scheduler.setter
    def scheduler(self, scheduler):
        """Sets the scheduler of this WorkflowJobSpecificationsModel.


        :param scheduler: The scheduler of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: object
        """

        self._scheduler = scheduler

    @property
    def needs_compute_node_schedule(self):
        """Gets the needs_compute_node_schedule of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The needs_compute_node_schedule of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: bool
        """
        return self._needs_compute_node_schedule

    @needs_compute_node_schedule.setter
    def needs_compute_node_schedule(self, needs_compute_node_schedule):
        """Sets the needs_compute_node_schedule of this WorkflowJobSpecificationsModel.


        :param needs_compute_node_schedule: The needs_compute_node_schedule of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: bool
        """

        self._needs_compute_node_schedule = needs_compute_node_schedule

    @property
    def consumes_user_data(self):
        """Gets the consumes_user_data of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The consumes_user_data of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._consumes_user_data

    @consumes_user_data.setter
    def consumes_user_data(self, consumes_user_data):
        """Sets the consumes_user_data of this WorkflowJobSpecificationsModel.


        :param consumes_user_data: The consumes_user_data of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: list[str]
        """

        self._consumes_user_data = consumes_user_data

    @property
    def stores_user_data(self):
        """Gets the stores_user_data of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The stores_user_data of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._stores_user_data

    @stores_user_data.setter
    def stores_user_data(self, stores_user_data):
        """Sets the stores_user_data of this WorkflowJobSpecificationsModel.


        :param stores_user_data: The stores_user_data of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: list[str]
        """

        self._stores_user_data = stores_user_data

    @property
    def resource_requirements(self):
        """Gets the resource_requirements of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The resource_requirements of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: str
        """
        return self._resource_requirements

    @resource_requirements.setter
    def resource_requirements(self, resource_requirements):
        """Sets the resource_requirements of this WorkflowJobSpecificationsModel.


        :param resource_requirements: The resource_requirements of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: str
        """

        self._resource_requirements = resource_requirements

    @property
    def input_files(self):
        """Gets the input_files of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The input_files of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._input_files

    @input_files.setter
    def input_files(self, input_files):
        """Sets the input_files of this WorkflowJobSpecificationsModel.


        :param input_files: The input_files of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: list[str]
        """

        self._input_files = input_files

    @property
    def output_files(self):
        """Gets the output_files of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The output_files of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._output_files

    @output_files.setter
    def output_files(self, output_files):
        """Sets the output_files of this WorkflowJobSpecificationsModel.


        :param output_files: The output_files of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: list[str]
        """

        self._output_files = output_files

    @property
    def blocked_by(self):
        """Gets the blocked_by of this WorkflowJobSpecificationsModel.  # noqa: E501


        :return: The blocked_by of this WorkflowJobSpecificationsModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._blocked_by

    @blocked_by.setter
    def blocked_by(self, blocked_by):
        """Sets the blocked_by of this WorkflowJobSpecificationsModel.


        :param blocked_by: The blocked_by of this WorkflowJobSpecificationsModel.  # noqa: E501
        :type: list[str]
        """

        self._blocked_by = blocked_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowJobSpecificationsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowJobSpecificationsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

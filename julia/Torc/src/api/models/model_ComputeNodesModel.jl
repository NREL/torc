# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""compute_nodes_model

    ComputeNodesModel(;
        hostname=nothing,
        pid=nothing,
        start_time=nothing,
        duration_seconds=nothing,
        is_active=nothing,
        resources=nothing,
        scheduler=nothing,
        _key=nothing,
        _id=nothing,
        _rev=nothing,
    )

    - hostname::String
    - pid::Int64
    - start_time::String
    - duration_seconds::Float64
    - is_active::Bool
    - resources::ComputeNodesResources
    - scheduler::Any
    - _key::String
    - _id::String
    - _rev::String
"""
Base.@kwdef mutable struct ComputeNodesModel <: OpenAPI.APIModel
    hostname::Union{Nothing, String} = nothing
    pid::Union{Nothing, Int64} = nothing
    start_time::Union{Nothing, String} = nothing
    duration_seconds::Union{Nothing, Float64} = nothing
    is_active::Union{Nothing, Bool} = nothing
    resources = nothing # spec type: Union{ Nothing, ComputeNodesResources }
    scheduler::Union{Nothing, Any} = nothing
    _key::Union{Nothing, String} = nothing
    _id::Union{Nothing, String} = nothing
    _rev::Union{Nothing, String} = nothing

    function ComputeNodesModel(hostname, pid, start_time, duration_seconds, is_active, resources, scheduler, _key, _id, _rev, )
        OpenAPI.validate_property(ComputeNodesModel, Symbol("hostname"), hostname)
        OpenAPI.validate_property(ComputeNodesModel, Symbol("pid"), pid)
        OpenAPI.validate_property(ComputeNodesModel, Symbol("start_time"), start_time)
        OpenAPI.validate_property(ComputeNodesModel, Symbol("duration_seconds"), duration_seconds)
        OpenAPI.validate_property(ComputeNodesModel, Symbol("is_active"), is_active)
        OpenAPI.validate_property(ComputeNodesModel, Symbol("resources"), resources)
        OpenAPI.validate_property(ComputeNodesModel, Symbol("scheduler"), scheduler)
        OpenAPI.validate_property(ComputeNodesModel, Symbol("_key"), _key)
        OpenAPI.validate_property(ComputeNodesModel, Symbol("_id"), _id)
        OpenAPI.validate_property(ComputeNodesModel, Symbol("_rev"), _rev)
        return new(hostname, pid, start_time, duration_seconds, is_active, resources, scheduler, _key, _id, _rev, )
    end
end # type ComputeNodesModel

const _property_types_ComputeNodesModel = Dict{Symbol,String}(Symbol("hostname")=>"String", Symbol("pid")=>"Int64", Symbol("start_time")=>"String", Symbol("duration_seconds")=>"Float64", Symbol("is_active")=>"Bool", Symbol("resources")=>"ComputeNodesResources", Symbol("scheduler")=>"Any", Symbol("_key")=>"String", Symbol("_id")=>"String", Symbol("_rev")=>"String", )
OpenAPI.property_type(::Type{ ComputeNodesModel }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ComputeNodesModel[name]))}

function check_required(o::ComputeNodesModel)
    o.hostname === nothing && (return false)
    o.pid === nothing && (return false)
    o.start_time === nothing && (return false)
    o.resources === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ComputeNodesModel }, name::Symbol, val)
end

# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""workflow_config_model

    WorkflowConfigModel(;
        worker_startup_script=nothing,
        compute_node_resource_stats=nothing,
        compute_node_expiration_buffer_seconds=nothing,
        compute_node_wait_for_new_jobs_seconds=nothing,
        compute_node_ignore_workflow_completion=false,
        compute_node_wait_for_healthy_database_minutes=nothing,
        prepare_jobs_sort_method="gpus_runtime_memory",
        _key=nothing,
        _id=nothing,
        _rev=nothing,
    )

    - worker_startup_script::String
    - compute_node_resource_stats::ComputeNodeResourceStatsModel
    - compute_node_expiration_buffer_seconds::Int64 : Inform all compute nodes to shut down this number of seconds before the expiration time. This allows torc to send SIGTERM to all job processes and set all statuses to terminated. Increase the time in cases where the job processes handle SIGTERM and need more time to gracefully shut down. Set the value to 0 to maximize the time given to jobs. If not set, take the database&#39;s default value of 60 seconds.
    - compute_node_wait_for_new_jobs_seconds::Int64 : Inform all compute nodes to wait for new jobs for this time period before exiting. Does not apply if the workflow is complete.
    - compute_node_ignore_workflow_completion::Bool : Inform all compute nodes to ignore workflow completions and hold onto allocations indefinitely. Useful for debugging failed jobs and possibly dynamic workflows where jobs get added after starting.
    - compute_node_wait_for_healthy_database_minutes::Int64 : Inform all compute nodes to wait this number of minutes if the database becomes unresponsive.
    - prepare_jobs_sort_method::String : Inform all compute nodes to use this sort method when calling the prepare_jobs_for_submission command.
    - _key::String
    - _id::String
    - _rev::String
"""
Base.@kwdef mutable struct WorkflowConfigModel <: OpenAPI.APIModel
    worker_startup_script::Union{Nothing, String} = nothing
    compute_node_resource_stats = nothing # spec type: Union{ Nothing, ComputeNodeResourceStatsModel }
    compute_node_expiration_buffer_seconds::Union{Nothing, Int64} = nothing
    compute_node_wait_for_new_jobs_seconds::Union{Nothing, Int64} = nothing
    compute_node_ignore_workflow_completion::Union{Nothing, Bool} = false
    compute_node_wait_for_healthy_database_minutes::Union{Nothing, Int64} = nothing
    prepare_jobs_sort_method::Union{Nothing, String} = "gpus_runtime_memory"
    _key::Union{Nothing, String} = nothing
    _id::Union{Nothing, String} = nothing
    _rev::Union{Nothing, String} = nothing

    function WorkflowConfigModel(worker_startup_script, compute_node_resource_stats, compute_node_expiration_buffer_seconds, compute_node_wait_for_new_jobs_seconds, compute_node_ignore_workflow_completion, compute_node_wait_for_healthy_database_minutes, prepare_jobs_sort_method, _key, _id, _rev, )
        o = new(worker_startup_script, compute_node_resource_stats, compute_node_expiration_buffer_seconds, compute_node_wait_for_new_jobs_seconds, compute_node_ignore_workflow_completion, compute_node_wait_for_healthy_database_minutes, prepare_jobs_sort_method, _key, _id, _rev, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type WorkflowConfigModel

const _property_types_WorkflowConfigModel = Dict{Symbol,String}(Symbol("worker_startup_script")=>"String", Symbol("compute_node_resource_stats")=>"ComputeNodeResourceStatsModel", Symbol("compute_node_expiration_buffer_seconds")=>"Int64", Symbol("compute_node_wait_for_new_jobs_seconds")=>"Int64", Symbol("compute_node_ignore_workflow_completion")=>"Bool", Symbol("compute_node_wait_for_healthy_database_minutes")=>"Int64", Symbol("prepare_jobs_sort_method")=>"String", Symbol("_key")=>"String", Symbol("_id")=>"String", Symbol("_rev")=>"String", )
OpenAPI.property_type(::Type{ WorkflowConfigModel }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_WorkflowConfigModel[name]))}

function OpenAPI.check_required(o::WorkflowConfigModel)
    true
end

function OpenAPI.validate_properties(o::WorkflowConfigModel)
    OpenAPI.validate_property(WorkflowConfigModel, Symbol("worker_startup_script"), o.worker_startup_script)
    OpenAPI.validate_property(WorkflowConfigModel, Symbol("compute_node_resource_stats"), o.compute_node_resource_stats)
    OpenAPI.validate_property(WorkflowConfigModel, Symbol("compute_node_expiration_buffer_seconds"), o.compute_node_expiration_buffer_seconds)
    OpenAPI.validate_property(WorkflowConfigModel, Symbol("compute_node_wait_for_new_jobs_seconds"), o.compute_node_wait_for_new_jobs_seconds)
    OpenAPI.validate_property(WorkflowConfigModel, Symbol("compute_node_ignore_workflow_completion"), o.compute_node_ignore_workflow_completion)
    OpenAPI.validate_property(WorkflowConfigModel, Symbol("compute_node_wait_for_healthy_database_minutes"), o.compute_node_wait_for_healthy_database_minutes)
    OpenAPI.validate_property(WorkflowConfigModel, Symbol("prepare_jobs_sort_method"), o.prepare_jobs_sort_method)
    OpenAPI.validate_property(WorkflowConfigModel, Symbol("_key"), o._key)
    OpenAPI.validate_property(WorkflowConfigModel, Symbol("_id"), o._id)
    OpenAPI.validate_property(WorkflowConfigModel, Symbol("_rev"), o._rev)
end

function OpenAPI.validate_property(::Type{ WorkflowConfigModel }, name::Symbol, val)







    if name === Symbol("prepare_jobs_sort_method")
        OpenAPI.validate_param(name, "WorkflowConfigModel", :enum, val, ["gpus_runtime_memory", "gpus_memory_runtime", "none"])
    end




end

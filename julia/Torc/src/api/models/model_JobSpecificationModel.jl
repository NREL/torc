# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""job_specification_model

    JobSpecificationModel(;
        name=nothing,
        key=nothing,
        command=nothing,
        invocation_script=nothing,
        cancel_on_blocking_job_failure=true,
        supports_termination=false,
        scheduler=nothing,
        schedule_compute_nodes=nothing,
        input_user_data=nothing,
        output_user_data=nothing,
        resource_requirements=nothing,
        input_files=nothing,
        output_files=nothing,
        blocked_by=nothing,
    )

    - name::String : Name of the job; must be unique within the workflow specification.
    - key::String : Optional database identifier for the job. If set, must be unique. It is recommended to let the database create the identifier.
    - command::String : CLI command to execute. Will not be executed in a shell and so must not include shell characters.
    - invocation_script::String : Wrapper script for command in case the environment needs customization.
    - cancel_on_blocking_job_failure::Bool : Cancel this job if any of its blocking jobs fails.
    - supports_termination::Bool : Informs torc that the job can be terminated gracefully before a wall-time timeout.
    - scheduler::String : Optional name of scheduler needed by this job
    - schedule_compute_nodes::ComputeNodeScheduleParams
    - input_user_data::Vector{String} : Names of user-data objects that this job needs
    - output_user_data::Vector{String} : Names of user-data objects that this job produces
    - resource_requirements::String : Optional name of resources required by this job
    - input_files::Vector{String} : Names of files that this job needs
    - output_files::Vector{String} : Names of files that this job produces
    - blocked_by::Vector{String} : Names of jobs that block this job
"""
Base.@kwdef mutable struct JobSpecificationModel <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    key::Union{Nothing, String} = nothing
    command::Union{Nothing, String} = nothing
    invocation_script::Union{Nothing, String} = nothing
    cancel_on_blocking_job_failure::Union{Nothing, Bool} = true
    supports_termination::Union{Nothing, Bool} = false
    scheduler::Union{Nothing, String} = nothing
    schedule_compute_nodes = nothing # spec type: Union{ Nothing, ComputeNodeScheduleParams }
    input_user_data::Union{Nothing, Vector{String}} = nothing
    output_user_data::Union{Nothing, Vector{String}} = nothing
    resource_requirements::Union{Nothing, String} = nothing
    input_files::Union{Nothing, Vector{String}} = nothing
    output_files::Union{Nothing, Vector{String}} = nothing
    blocked_by::Union{Nothing, Vector{String}} = nothing

    function JobSpecificationModel(name, key, command, invocation_script, cancel_on_blocking_job_failure, supports_termination, scheduler, schedule_compute_nodes, input_user_data, output_user_data, resource_requirements, input_files, output_files, blocked_by, )
        o = new(name, key, command, invocation_script, cancel_on_blocking_job_failure, supports_termination, scheduler, schedule_compute_nodes, input_user_data, output_user_data, resource_requirements, input_files, output_files, blocked_by, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type JobSpecificationModel

const _property_types_JobSpecificationModel = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("key")=>"String", Symbol("command")=>"String", Symbol("invocation_script")=>"String", Symbol("cancel_on_blocking_job_failure")=>"Bool", Symbol("supports_termination")=>"Bool", Symbol("scheduler")=>"String", Symbol("schedule_compute_nodes")=>"ComputeNodeScheduleParams", Symbol("input_user_data")=>"Vector{String}", Symbol("output_user_data")=>"Vector{String}", Symbol("resource_requirements")=>"String", Symbol("input_files")=>"Vector{String}", Symbol("output_files")=>"Vector{String}", Symbol("blocked_by")=>"Vector{String}", )
OpenAPI.property_type(::Type{ JobSpecificationModel }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_JobSpecificationModel[name]))}

function OpenAPI.check_required(o::JobSpecificationModel)
    o.command === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::JobSpecificationModel)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("name"), o.name)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("key"), o.key)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("command"), o.command)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("invocation_script"), o.invocation_script)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("cancel_on_blocking_job_failure"), o.cancel_on_blocking_job_failure)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("supports_termination"), o.supports_termination)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("scheduler"), o.scheduler)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("schedule_compute_nodes"), o.schedule_compute_nodes)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("input_user_data"), o.input_user_data)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("output_user_data"), o.output_user_data)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("resource_requirements"), o.resource_requirements)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("input_files"), o.input_files)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("output_files"), o.output_files)
    OpenAPI.validate_property(JobSpecificationModel, Symbol("blocked_by"), o.blocked_by)
end

function OpenAPI.validate_property(::Type{ JobSpecificationModel }, name::Symbol, val)














end

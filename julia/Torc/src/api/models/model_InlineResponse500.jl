# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""inline_response_500

    InlineResponse500(;
        error=nothing,
        errorNum=nothing,
        errorMessage=nothing,
        code=nothing,
    )

    - error::Any
    - errorNum::Int64
    - errorMessage::String
    - code::Int64
"""
Base.@kwdef mutable struct InlineResponse500 <: OpenAPI.APIModel
    error::Union{Nothing, Any} = nothing
    errorNum::Union{Nothing, Int64} = nothing
    errorMessage::Union{Nothing, String} = nothing
    code::Union{Nothing, Int64} = nothing

    function InlineResponse500(error, errorNum, errorMessage, code, )
        OpenAPI.validate_property(InlineResponse500, Symbol("error"), error)
        OpenAPI.validate_property(InlineResponse500, Symbol("errorNum"), errorNum)
        OpenAPI.validate_property(InlineResponse500, Symbol("errorMessage"), errorMessage)
        OpenAPI.validate_property(InlineResponse500, Symbol("code"), code)
        return new(error, errorNum, errorMessage, code, )
    end
end # type InlineResponse500

const _property_types_InlineResponse500 = Dict{Symbol,String}(Symbol("error")=>"Any", Symbol("errorNum")=>"Int64", Symbol("errorMessage")=>"String", Symbol("code")=>"Int64", )
OpenAPI.property_type(::Type{ InlineResponse500 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_InlineResponse500[name]))}

function check_required(o::InlineResponse500)
    o.error === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ InlineResponse500 }, name::Symbol, val)
end

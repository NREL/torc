# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""compute_node_schedule_params

    ComputeNodeScheduleParams(;
        max_parallel_jobs=nothing,
        num_jobs=nothing,
        scheduler_id=nothing,
        start_one_worker_per_node=false,
    )

    - max_parallel_jobs::Int64
    - num_jobs::Int64
    - scheduler_id::String
    - start_one_worker_per_node::Bool
"""
Base.@kwdef mutable struct ComputeNodeScheduleParams <: OpenAPI.APIModel
    max_parallel_jobs::Union{Nothing, Int64} = nothing
    num_jobs::Union{Nothing, Int64} = nothing
    scheduler_id::Union{Nothing, String} = nothing
    start_one_worker_per_node::Union{Nothing, Bool} = false

    function ComputeNodeScheduleParams(max_parallel_jobs, num_jobs, scheduler_id, start_one_worker_per_node, )
        OpenAPI.validate_property(ComputeNodeScheduleParams, Symbol("max_parallel_jobs"), max_parallel_jobs)
        OpenAPI.validate_property(ComputeNodeScheduleParams, Symbol("num_jobs"), num_jobs)
        OpenAPI.validate_property(ComputeNodeScheduleParams, Symbol("scheduler_id"), scheduler_id)
        OpenAPI.validate_property(ComputeNodeScheduleParams, Symbol("start_one_worker_per_node"), start_one_worker_per_node)
        return new(max_parallel_jobs, num_jobs, scheduler_id, start_one_worker_per_node, )
    end
end # type ComputeNodeScheduleParams

const _property_types_ComputeNodeScheduleParams = Dict{Symbol,String}(Symbol("max_parallel_jobs")=>"Int64", Symbol("num_jobs")=>"Int64", Symbol("scheduler_id")=>"String", Symbol("start_one_worker_per_node")=>"Bool", )
OpenAPI.property_type(::Type{ ComputeNodeScheduleParams }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ComputeNodeScheduleParams[name]))}

function check_required(o::ComputeNodeScheduleParams)
    o.num_jobs === nothing && (return false)
    o.scheduler_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ComputeNodeScheduleParams }, name::Symbol, val)
end

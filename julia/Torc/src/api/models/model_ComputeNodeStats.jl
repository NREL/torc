# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""compute_node_stats

    ComputeNodeStats(;
        resource_type=nothing,
        average=nothing,
        minimum=nothing,
        maximum=nothing,
        num_samples=nothing,
        job_key=nothing,
    )

    - resource_type::String
    - average::Any
    - minimum::Any
    - maximum::Any
    - num_samples::Int64
    - job_key::String
"""
Base.@kwdef mutable struct ComputeNodeStats <: OpenAPI.APIModel
    resource_type::Union{Nothing, String} = nothing
    average::Union{Nothing, Any} = nothing
    minimum::Union{Nothing, Any} = nothing
    maximum::Union{Nothing, Any} = nothing
    num_samples::Union{Nothing, Int64} = nothing
    job_key::Union{Nothing, String} = nothing

    function ComputeNodeStats(resource_type, average, minimum, maximum, num_samples, job_key, )
        OpenAPI.validate_property(ComputeNodeStats, Symbol("resource_type"), resource_type)
        OpenAPI.validate_property(ComputeNodeStats, Symbol("average"), average)
        OpenAPI.validate_property(ComputeNodeStats, Symbol("minimum"), minimum)
        OpenAPI.validate_property(ComputeNodeStats, Symbol("maximum"), maximum)
        OpenAPI.validate_property(ComputeNodeStats, Symbol("num_samples"), num_samples)
        OpenAPI.validate_property(ComputeNodeStats, Symbol("job_key"), job_key)
        return new(resource_type, average, minimum, maximum, num_samples, job_key, )
    end
end # type ComputeNodeStats

const _property_types_ComputeNodeStats = Dict{Symbol,String}(Symbol("resource_type")=>"String", Symbol("average")=>"Any", Symbol("minimum")=>"Any", Symbol("maximum")=>"Any", Symbol("num_samples")=>"Int64", Symbol("job_key")=>"String", )
OpenAPI.property_type(::Type{ ComputeNodeStats }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ComputeNodeStats[name]))}

function check_required(o::ComputeNodeStats)
    o.resource_type === nothing && (return false)
    o.average === nothing && (return false)
    o.minimum === nothing && (return false)
    o.maximum === nothing && (return false)
    o.num_samples === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ComputeNodeStats }, name::Symbol, val)
end

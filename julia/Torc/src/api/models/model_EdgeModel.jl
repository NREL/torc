# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""edge_model

    EdgeModel(;
        _from=nothing,
        _to=nothing,
        data=nothing,
        _key=nothing,
        _id=nothing,
        _rev=nothing,
    )

    - _from::String : Database ID of the &#39;from&#39; document
    - _to::String : Database ID of the &#39;to&#39; document
    - data::Any : User-defined data
    - _key::String
    - _id::String
    - _rev::String
"""
Base.@kwdef mutable struct EdgeModel <: OpenAPI.APIModel
    _from::Union{Nothing, String} = nothing
    _to::Union{Nothing, String} = nothing
    data::Union{Nothing, Any} = nothing
    _key::Union{Nothing, String} = nothing
    _id::Union{Nothing, String} = nothing
    _rev::Union{Nothing, String} = nothing

    function EdgeModel(_from, _to, data, _key, _id, _rev, )
        o = new(_from, _to, data, _key, _id, _rev, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type EdgeModel

const _property_types_EdgeModel = Dict{Symbol,String}(Symbol("_from")=>"String", Symbol("_to")=>"String", Symbol("data")=>"Any", Symbol("_key")=>"String", Symbol("_id")=>"String", Symbol("_rev")=>"String", )
OpenAPI.property_type(::Type{ EdgeModel }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EdgeModel[name]))}

function OpenAPI.check_required(o::EdgeModel)
    o._from === nothing && (return false)
    o._to === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::EdgeModel)
    OpenAPI.validate_property(EdgeModel, Symbol("_from"), o._from)
    OpenAPI.validate_property(EdgeModel, Symbol("_to"), o._to)
    OpenAPI.validate_property(EdgeModel, Symbol("data"), o.data)
    OpenAPI.validate_property(EdgeModel, Symbol("_key"), o._key)
    OpenAPI.validate_property(EdgeModel, Symbol("_id"), o._id)
    OpenAPI.validate_property(EdgeModel, Symbol("_rev"), o._rev)
end

function OpenAPI.validate_property(::Type{ EdgeModel }, name::Symbol, val)






end

#!/usr/bin/env python

"""This script fixes a bunch of problems in the Swagger spec generated by ArangoDB/Foxx.
It's painful and perhaps only minimally better than maintaining our own openapi.yaml. This will
hopefully improve with newer versions of Arango.

1. It doesn't recognize models that are returned in the get-all methods and instead makes inline
   models. Those inline models cannot be used in put methods.
2. It doesn't handle the case where one schema composes another. It creates an inline model for
   the composed schema and those cannot be used in put methods.
3. It generates duplicate models like workflow_jobs_model and jobs_key_model. This
   is OK with Swagger v2 but fails with OpenAPI v7. Remove the *key_model variants.
"""

import os
import sys
from pathlib import Path

import yaml


def main():
    """Entry point"""
    if len(sys.argv) != 2:
        print(f"Usage: python {sys.argv[0]} SPEC_FILE", file=sys.stderr)
        sys.exit(1)

    spec_file = Path(sys.argv[1])
    spec_file_tmp = Path(sys.argv[1] + ".bk")
    _replace_strings(
        spec_file_tmp,
        spec_file,
        [
            ("DELETE", "delete"),
            ("GET", "get"),
            ("POST", "post"),
            ("PUT", "put"),
            # Arango uses 'body' for request/response body.
            # 'model' makes more sense for items stored in the db.
            ("_body", "_model"),
            # These names look odd. Change for clarity.
            ("workflowsworkflowcompute_nodes_resources", "compute_nodes_resources"),
            ("workflowsworkflowjobs_internal", "jobs_internal"),
            ("workflowsworkflowcompute_node_stats_stats", "compute_node_stats"),
            ("workflowskeystatus_auto_tune_status", "auto_tune_status"),
            ("key_config_model", "workflow_config_model"),
            ("key_status_model", "workflow_status_model"),
            (
                "workflow_specifications_config_compute_node_resource_stats",
                "compute_node_resource_stats_model",
            ),
            ("get_workflows_key_events_after_key_event_key", "get_events_after_key"),
            ("get_workflows_key_latest_event_key", "get_latest_event_key"),
            ("workflowsworkflowbulk_jobs_jobs", "job_with_edges_model"),
        ],
    )
    os.rename(spec_file_tmp, spec_file)

    with open(spec_file, "r", encoding="utf-8") as f:
        data = yaml.safe_load(f)

    data["info"]["title"] = "torc"
    data["info"]["version"] = "v0.2.5"
    data["info"]["license"] = {"name": "BSD 3-Clause"}

    _replace_paths_and_components(
        data,
        [
            ("/workflows/{workflow}/aws_schedulers", "get"),
            ("/workflows/{workflow}/compute_nodes", "get"),
            ("/workflows/{workflow}/compute_node_stats", "get"),
            ("/workflows/{workflow}/events", "get"),
            ("/workflows/{workflow}/files", "get"),
            ("/workflows/{workflow}/jobs", "get"),
            ("/workflows/{workflow}/job_process_stats", "get"),
            ("/workflows/{workflow}/local_schedulers", "get"),
            ("/workflows/{workflow}/resource_requirements", "get"),
            ("/workflows/{workflow}/results", "get"),
            ("/workflows/{workflow}/scheduled_compute_nodes", "get"),
            ("/workflows/{workflow}/slurm_schedulers", "get"),
            ("/workflows/{workflow}/user_data", "get"),
            ("/workflows/{workflow}/edges/{name}", "get"),
            ("/workflows/{workflow}/files/produced_by_job/{key}", "get"),
            ("/workflows/{workflow}/job_specifications", "get"),
            ("/workflows/{workflow}/jobs/find_by_status/{status}", "get"),
            ("/workflows/{workflow}/jobs/find_by_needs_file/{key}", "get"),
            ("/workflows/{workflow}/jobs/{key}/user_data_stores", "get"),
            ("/workflows/{workflow}/jobs/{key}/user_data_consumes", "get"),
            ("/workflows", "get"),
            ("/workflows/{key}/is_complete", "get"),
            ("/workflows/{key}/ready_job_requirements", "get"),
            ("/workflows/{key}/process_changed_job_inputs", "post"),
            ("/workflows/{key}/missing_user_data", "get"),
            ("/workflows/{key}/required_existing_files", "get"),
            ("/workflows/{key}/prepare_jobs_for_submission", "post"),
            ("/workflows/{key}/prepare_next_jobs_for_submission", "post"),
            ("/workflows/{key}/prepare_jobs_for_scheduling", "post"),
            ("/workflows/{key}/collection_names", "get"),
            ("/workflows/{key}/join_by_inbound_edge/{collection}/{edge}", "post"),
            ("/workflows/{key}/join_by_outbound_edge/{collection}/{edge}", "post"),
            ("/workflows/{key}/dot_graph/{name}", "get"),
        ],
    )

    commands = [
        ApiCommand(
            path="/workflow_specifications",
            responses=OpsComponent(
                ops=["post"],
                component="#/components/schemas/workflows_model",
            ),
        ),
        ApiCommand(
            path="/workflow_specifications/{key}",
            responses=OpsComponent(
                ops=["get"],
                component="#/components/schemas/workflow_specifications_model",
            ),
        ),
        ApiCommand(
            path="/workflow_specifications/example",
            responses=OpsComponent(
                ops=["get"],
                component="#/components/schemas/workflow_specifications_model",
            ),
        ),
        ApiCommand(
            path="/workflow_specifications/template",
            responses=OpsComponent(
                ops=["get"],
                component="#/components/schemas/workflow_specifications_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{key}",
            responses=OpsComponent(
                ops=["delete", "put"],
                component="#/components/schemas/workflows_model",
            ),
            requests=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflows_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{key}/config",
            responses=OpsComponent(
                ops=["get", "put"],
                component="#/components/schemas/workflow_config_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{key}/status",
            responses=OpsComponent(
                ops=["get", "put"],
                component="#/components/schemas/workflow_status_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/aws_schedulers/{key}",
            responses=OpsComponent(
                ops=["delete", "put"],
                component="#/components/schemas/workflow_aws_schedulers_model",
            ),
            requests=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflow_aws_schedulers_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/compute_node_stats",
            responses=OpsComponent(
                ops=["post"],
                component="#/components/schemas/workflow_compute_node_stats_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/compute_node_stats/{key}",
            responses=OpsComponent(
                ops=["delete", "get", "put"],
                component="#/components/schemas/workflow_compute_node_stats_model",
            ),
            requests=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflow_compute_node_stats_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/compute_nodes",
            responses=OpsComponent(
                ops=["post"],
                component="#/components/schemas/workflow_compute_nodes_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/compute_nodes/{key}",
            requests=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflow_compute_nodes_model",
            ),
        ),
        # Arango doesn't handle the condition where the response schema composes another schema.
        # It puts an inline response instead of a named response.
        ApiCommand(
            path="/workflows/{workflow}/compute_nodes/{key}",
            responses=OpsComponent(
                ops=["delete", "get", "put"],
                component="#/components/schemas/workflow_compute_nodes_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/files/{key}",
            requests=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflow_files_model",
            ),
            responses=OpsComponent(
                ops=["delete", "put"],
                component="#/components/schemas/workflow_files_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/job_process_stats/{key}",
            requests=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflow_job_process_stats_model",
            ),
            responses=OpsComponent(
                ops=["delete", "put"],
                component="#/components/schemas/workflow_job_process_stats_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/job_specifications",
            responses=OpsComponent(
                ops=["post"],
                component="#/components/schemas/workflow_job_specifications_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/job_specifications/{key}",
            responses=OpsComponent(
                ops=["get"],
                component="#/components/schemas/workflow_job_specifications_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/jobs",
            responses=OpsComponent(
                ops=["post"],
                component="#/components/schemas/workflow_jobs_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/jobs/{key}",
            requests=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflow_jobs_model",
            ),
            responses=OpsComponent(
                ops=["delete", "get", "put"],
                component="#/components/schemas/workflow_jobs_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/jobs/{key}/complete_job/{status}/{rev}/{run_id}",
            requests=OpsComponent(
                ops=["post"],
                component="#/components/schemas/workflow_results_model",
            ),
            responses=OpsComponent(
                ops=["post"],
                component="#/components/schemas/workflow_jobs_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/jobs/{key}/manage_status_change/{status}/{rev}/{run_id}",
            responses=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflow_jobs_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/jobs/{key}/process_stats",
            responses=OpsComponent(
                ops=["get"],
                component="#/components/schemas/workflow_job_process_stats_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/jobs/{key}/resource_requirements",
            responses=OpsComponent(
                ops=["get"],
                component="#/components/schemas/workflow_resource_requirements_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/local_schedulers/{key}",
            requests=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflow_local_schedulers_model",
            ),
            responses=OpsComponent(
                ops=["delete", "put"],
                component="#/components/schemas/workflow_local_schedulers_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/resource_requirements/{key}",
            requests=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflow_resource_requirements_model",
            ),
            responses=OpsComponent(
                ops=["delete", "put"],
                component="#/components/schemas/workflow_resource_requirements_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/results/{key}",
            requests=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflow_results_model",
            ),
            responses=OpsComponent(
                ops=["delete", "put"],
                component="#/components/schemas/workflow_results_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/results/find_by_job/{key}",
            responses=OpsComponent(
                ops=["get"],
                component="#/components/schemas/workflow_results_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/scheduled_compute_nodes/{key}",
            requests=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflow_scheduled_compute_nodes_model",
            ),
            responses=OpsComponent(
                ops=["delete", "put"],
                component="#/components/schemas/workflow_scheduled_compute_nodes_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/slurm_schedulers/{key}",
            requests=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflow_slurm_schedulers_model",
            ),
            responses=OpsComponent(
                ops=["delete", "put"],
                component="#/components/schemas/workflow_slurm_schedulers_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/user_data",
            requests=OpsComponent(
                ops=["post"],
                component="#/components/schemas/workflow_user_data_model",
            ),
            responses=OpsComponent(
                ops=["post"],
                component="#/components/schemas/workflow_user_data_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/jobs/{key}/user_data",
            requests=OpsComponent(
                ops=["post"],
                component="#/components/schemas/workflow_user_data_model",
            ),
            responses=OpsComponent(
                ops=["post"],
                component="#/components/schemas/workflow_user_data_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{workflow}/user_data/{key}",
            requests=OpsComponent(
                ops=["put"],
                component="#/components/schemas/workflow_user_data_model",
            ),
            responses=OpsComponent(
                ops=["delete", "put"],
                component="#/components/schemas/workflow_user_data_model",
            ),
        ),
        ApiCommand(
            path="/workflows/{key}/prepare_jobs_for_submission",
            requests=OpsComponent(
                ops=["post"],
                component="#/components/schemas/compute_nodes_resources",
            ),
        ),
        ApiCommand(
            path="/workflows/{key}/events_after_key/{event_key}",
            responses=OpsComponent(
                ops=["get"],
                component="#/components/schemas/get_workflows_workflow_events_response",
            ),
        ),
    ]

    for command in commands:
        command.make_replacements(data)

    schemas = data["components"]["schemas"]
    schemas["get_workflows_response"]["properties"]["items"]["items"][
        "$ref"
    ] = "#/components/schemas/workflows_model"
    schemas["get_workflows_workflow_compute_node_stats_response"]["properties"]["items"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_compute_node_stats_model"
    schemas["get_workflows_workflow_aws_schedulers_response"]["properties"]["items"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_aws_schedulers_model"
    schemas["get_workflows_workflow_local_schedulers_response"]["properties"]["items"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_local_schedulers_model"
    schemas["get_workflows_workflow_slurm_schedulers_response"]["properties"]["items"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_slurm_schedulers_model"
    schemas["get_workflows_workflow_files_response"]["properties"]["items"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_files_model"
    schemas["get_workflows_workflow_jobs_response"]["properties"]["items"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_jobs_model"
    schemas["get_workflows_workflow_job_process_stats_response"]["properties"]["items"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_job_process_stats_model"
    schemas["get_workflows_workflow_resource_requirements_response"]["properties"]["items"][
        "items"
    ]["$ref"] = "#/components/schemas/workflow_resource_requirements_model"
    schemas["get_workflows_workflow_results_response"]["properties"]["items"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_results_model"
    schemas["get_workflows_workflow_scheduled_compute_nodes_response"]["properties"]["items"][
        "items"
    ]["$ref"] = "#/components/schemas/workflow_scheduled_compute_nodes_model"
    schemas["post_workflows_key_prepare_jobs_for_submission_response"]["properties"]["jobs"][
        "items"
    ]["$ref"] = "#/components/schemas/workflow_jobs_model"
    schemas["post_workflows_key_prepare_next_jobs_for_submission_response"]["properties"]["jobs"][
        "items"
    ]["$ref"] = "#/components/schemas/workflow_jobs_model"
    schemas["workflow_specifications_schedulers"]["properties"]["aws_schedulers"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_aws_schedulers_model"
    schemas["workflow_specifications_schedulers"]["properties"]["local_schedulers"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_local_schedulers_model"
    schemas["workflow_specifications_schedulers"]["properties"]["slurm_schedulers"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_slurm_schedulers_model"
    schemas["get_workflows_workflow_user_data_response"]["properties"]["items"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_user_data_model"
    schemas["get_workflows_workflow_compute_nodes_response"]["properties"]["items"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_compute_nodes_model"
    schemas["workflow_specifications_model"]["properties"]["config"][
        "$ref"
    ] = "#/components/schemas/workflow_config_model"
    schemas["job_with_edges_model"]["properties"]["job"][
        "$ref"
    ] = "#/components/schemas/workflow_jobs_model"
    w_spec_props = schemas["workflow_specifications_model"]["properties"]
    w_spec_props["files"]["items"]["$ref"] = "#/components/schemas/workflow_files_model"
    w_spec_props["user_data"]["items"]["$ref"] = "#/components/schemas/workflow_user_data_model"
    w_spec_props["resource_requirements"]["items"][
        "$ref"
    ] = "#/components/schemas/workflow_resource_requirements_model"

    # The JavaScript Joi script needs to have .allow(null, '') for validation to work.
    # For some reason that produces type=object in the schema. Change to string.
    for component, field in [
        ("key_prepare_jobs_for_submission_model", "scheduler_config_id"),
        ("compute_nodes_resources", "scheduler_config_id"),
        ("jobs_internal", "scheduler_config_id"),
        ("workflow_job_specifications_model", "scheduler"),
        ("workflow_job_specifications_model", "invocation_script"),
        ("workflow_jobs_model", "invocation_script"),
        ("workflows_model", "description"),
        ("workflows_model", "name"),
        ("workflows_model", "timestamp"),
        ("workflows_model", "user"),
        ("workflow_specifications_model", "description"),
        ("workflow_specifications_model", "name"),
        ("workflow_specifications_model", "user"),
        ("workflow_slurm_schedulers_model", "extra"),
        ("workflow_slurm_schedulers_model", "gres"),
        ("workflow_slurm_schedulers_model", "mem"),
        ("workflow_slurm_schedulers_model", "tmp"),
        ("compute_nodes_resources", "time_limit"),
    ]:
        data["components"]["schemas"][component]["properties"][field]["type"] = "string"

    for name in (
        "aws_schedulers_key_model",
        "compute_node_stats_key_model",
        "compute_nodes_key_model",
        "files_key_model",
        "job_process_stats_key_model",
        "jobs_key_model",
        "key_prepare_jobs_for_submission_model",
        "key_user_data_model",
        "local_schedulers_key_model",
        "resource_requirements_key_model",
        "rev_run_id_model",
        "results_key_model",
        "status_rev_model",
        "scheduled_compute_nodes_key_model",
        "slurm_schedulers_key_model",
        "user_data_key_model",
        "workflows_key_model",
    ):
        data["components"]["schemas"].pop(name, None)
    for name in [x for x in data["components"]["schemas"] if x.startswith("inline_response_200")]:
        data["components"]["schemas"].pop(name)
    data["components"]["schemas"].pop("workflow_specifications_config")

    with open(spec_file, "w", encoding="utf-8") as f:
        yaml.dump(data, f, sort_keys=False)

    print(f"Wrote fixed spec to {spec_file}")


def _replace_paths_and_components(data, paths):
    for path, op in paths:
        op_id = data["paths"][path][op]["operationId"]
        old_component = data["paths"][path][op]["responses"]["200"]["content"]["application/json"][
            "schema"
        ]["$ref"]
        old_name = old_component.split("/")[-1]
        new_component = f"#/components/schemas/{op_id}_response"
        new_name = f"{op_id}_response"
        assert new_name not in data["components"]["schemas"], new_name
        data["paths"][path][op]["responses"]["200"]["content"]["application/json"]["schema"][
            "$ref"
        ] = new_component
        data["components"]["schemas"][new_name] = data["components"]["schemas"][old_name]


def _replace_strings(dst_file: Path, src_file: Path, strings):
    with open(dst_file, "w", encoding="utf-8") as f:
        for line in src_file.read_text().splitlines():
            for old_str, new_str in strings:
                line = line.replace(old_str, new_str)
            f.write(line)
            f.write("\n")


class OpsComponent:
    """Defines operations and a component schema"""

    def __init__(self, ops, component):
        self.ops = ops
        self.component = component


class ApiCommand:
    """Controls manipulation of API commands"""

    def __init__(self, path, requests=None, responses=None):
        self.path = path
        self.requests = requests
        self.responses = responses

    def make_replacements(self, data):
        """Replace request and response schemas"""
        if self.requests is not None:
            for op in self.requests.ops:
                data["paths"][self.path][op]["requestBody"]["content"]["application/json"][
                    "schema"
                ]["$ref"] = self.requests.component

        if self.responses is not None:
            for op in self.responses.ops:
                if (
                    "items"
                    in data["paths"][self.path][op]["responses"]["200"]["content"][
                        "application/json"
                    ]["schema"]
                ):
                    obj = data["paths"][self.path][op]["responses"]["200"]["content"][
                        "application/json"
                    ]["schema"]["items"]
                else:
                    obj = data["paths"][self.path][op]["responses"]["200"]["content"][
                        "application/json"
                    ]["schema"]
                obj["$ref"] = self.responses.component


if __name__ == "__main__":
    main()

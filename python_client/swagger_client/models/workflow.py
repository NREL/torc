# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Workflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jobs': 'list[JobDefinition2]',
        'files': 'list[WorkflowFiles]',
        'resource_requirements': 'list[WorkflowResourceRequirements]',
        'schedulers': 'list[WorkflowSchedulers]'
    }

    attribute_map = {
        'jobs': 'jobs',
        'files': 'files',
        'resource_requirements': 'resource_requirements',
        'schedulers': 'schedulers'
    }

    def __init__(self, jobs=None, files=None, resource_requirements=None, schedulers=None):  # noqa: E501
        """Workflow - a model defined in Swagger"""  # noqa: E501
        self._jobs = None
        self._files = None
        self._resource_requirements = None
        self._schedulers = None
        self.discriminator = None
        if jobs is not None:
            self.jobs = jobs
        if files is not None:
            self.files = files
        if resource_requirements is not None:
            self.resource_requirements = resource_requirements
        if schedulers is not None:
            self.schedulers = schedulers

    @property
    def jobs(self):
        """Gets the jobs of this Workflow.  # noqa: E501


        :return: The jobs of this Workflow.  # noqa: E501
        :rtype: list[JobDefinition2]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs):
        """Sets the jobs of this Workflow.


        :param jobs: The jobs of this Workflow.  # noqa: E501
        :type: list[JobDefinition2]
        """

        self._jobs = jobs

    @property
    def files(self):
        """Gets the files of this Workflow.  # noqa: E501


        :return: The files of this Workflow.  # noqa: E501
        :rtype: list[WorkflowFiles]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Workflow.


        :param files: The files of this Workflow.  # noqa: E501
        :type: list[WorkflowFiles]
        """

        self._files = files

    @property
    def resource_requirements(self):
        """Gets the resource_requirements of this Workflow.  # noqa: E501


        :return: The resource_requirements of this Workflow.  # noqa: E501
        :rtype: list[WorkflowResourceRequirements]
        """
        return self._resource_requirements

    @resource_requirements.setter
    def resource_requirements(self, resource_requirements):
        """Sets the resource_requirements of this Workflow.


        :param resource_requirements: The resource_requirements of this Workflow.  # noqa: E501
        :type: list[WorkflowResourceRequirements]
        """

        self._resource_requirements = resource_requirements

    @property
    def schedulers(self):
        """Gets the schedulers of this Workflow.  # noqa: E501


        :return: The schedulers of this Workflow.  # noqa: E501
        :rtype: list[WorkflowSchedulers]
        """
        return self._schedulers

    @schedulers.setter
    def schedulers(self, schedulers):
        """Sets the schedulers of this Workflow.


        :param schedulers: The schedulers of this Workflow.  # noqa: E501
        :type: list[WorkflowSchedulers]
        """

        self._schedulers = schedulers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Workflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Workflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2005(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'items': 'list[FileModel]',
        'skip': 'float',
        'max_limit': 'float',
        'count': 'float',
        'total_count': 'float',
        'has_more': 'bool'
    }

    attribute_map = {
        'items': 'items',
        'skip': 'skip',
        'max_limit': 'max_limit',
        'count': 'count',
        'total_count': 'total_count',
        'has_more': 'has_more'
    }

    def __init__(self, items=None, skip=None, max_limit=None, count=None, total_count=None, has_more=None):  # noqa: E501
        """InlineResponse2005 - a model defined in Swagger"""  # noqa: E501
        self._items = None
        self._skip = None
        self._max_limit = None
        self._count = None
        self._total_count = None
        self._has_more = None
        self.discriminator = None
        if items is not None:
            self.items = items
        self.skip = skip
        self.max_limit = max_limit
        self.count = count
        self.total_count = total_count
        self.has_more = has_more

    @property
    def items(self):
        """Gets the items of this InlineResponse2005.  # noqa: E501


        :return: The items of this InlineResponse2005.  # noqa: E501
        :rtype: list[FileModel]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this InlineResponse2005.


        :param items: The items of this InlineResponse2005.  # noqa: E501
        :type: list[FileModel]
        """

        self._items = items

    @property
    def skip(self):
        """Gets the skip of this InlineResponse2005.  # noqa: E501


        :return: The skip of this InlineResponse2005.  # noqa: E501
        :rtype: float
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this InlineResponse2005.


        :param skip: The skip of this InlineResponse2005.  # noqa: E501
        :type: float
        """
        if skip is None:
            raise ValueError("Invalid value for `skip`, must not be `None`")  # noqa: E501

        self._skip = skip

    @property
    def max_limit(self):
        """Gets the max_limit of this InlineResponse2005.  # noqa: E501


        :return: The max_limit of this InlineResponse2005.  # noqa: E501
        :rtype: float
        """
        return self._max_limit

    @max_limit.setter
    def max_limit(self, max_limit):
        """Sets the max_limit of this InlineResponse2005.


        :param max_limit: The max_limit of this InlineResponse2005.  # noqa: E501
        :type: float
        """
        if max_limit is None:
            raise ValueError("Invalid value for `max_limit`, must not be `None`")  # noqa: E501

        self._max_limit = max_limit

    @property
    def count(self):
        """Gets the count of this InlineResponse2005.  # noqa: E501


        :return: The count of this InlineResponse2005.  # noqa: E501
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this InlineResponse2005.


        :param count: The count of this InlineResponse2005.  # noqa: E501
        :type: float
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def total_count(self):
        """Gets the total_count of this InlineResponse2005.  # noqa: E501


        :return: The total_count of this InlineResponse2005.  # noqa: E501
        :rtype: float
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this InlineResponse2005.


        :param total_count: The total_count of this InlineResponse2005.  # noqa: E501
        :type: float
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")  # noqa: E501

        self._total_count = total_count

    @property
    def has_more(self):
        """Gets the has_more of this InlineResponse2005.  # noqa: E501


        :return: The has_more of this InlineResponse2005.  # noqa: E501
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this InlineResponse2005.


        :param has_more: The has_more of this InlineResponse2005.  # noqa: E501
        :type: bool
        """
        if has_more is None:
            raise ValueError("Invalid value for `has_more`, must not be `None`")  # noqa: E501

        self._has_more = has_more

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class JobModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "command": "str",
        "status": "str",
        "cancel_on_blocking_job_failure": "bool",
        "interruptible": "bool",
        "key": "str",
        "id": "str",
        "rev": "str",
    }

    attribute_map = {
        "name": "name",
        "command": "command",
        "status": "status",
        "cancel_on_blocking_job_failure": "cancel_on_blocking_job_failure",
        "interruptible": "interruptible",
        "key": "_key",
        "id": "_id",
        "rev": "_rev",
    }

    def __init__(
        self,
        name=None,
        command=None,
        status=None,
        cancel_on_blocking_job_failure=True,
        interruptible=False,
        key=None,
        id=None,
        rev=None,
    ):  # noqa: E501
        """JobModel - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._command = None
        self._status = None
        self._cancel_on_blocking_job_failure = None
        self._interruptible = None
        self._key = None
        self._id = None
        self._rev = None
        self.discriminator = None
        self.name = name
        self.command = command
        if status is not None:
            self.status = status
        if cancel_on_blocking_job_failure is not None:
            self.cancel_on_blocking_job_failure = cancel_on_blocking_job_failure
        if interruptible is not None:
            self.interruptible = interruptible
        if key is not None:
            self.key = key
        if id is not None:
            self.id = id
        if rev is not None:
            self.rev = rev

    @property
    def name(self):
        """Gets the name of this JobModel.  # noqa: E501


        :return: The name of this JobModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobModel.


        :param name: The name of this JobModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def command(self):
        """Gets the command of this JobModel.  # noqa: E501


        :return: The command of this JobModel.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this JobModel.


        :param command: The command of this JobModel.  # noqa: E501
        :type: str
        """
        if command is None:
            raise ValueError(
                "Invalid value for `command`, must not be `None`"
            )  # noqa: E501

        self._command = command

    @property
    def status(self):
        """Gets the status of this JobModel.  # noqa: E501


        :return: The status of this JobModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobModel.


        :param status: The status of this JobModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def cancel_on_blocking_job_failure(self):
        """Gets the cancel_on_blocking_job_failure of this JobModel.  # noqa: E501


        :return: The cancel_on_blocking_job_failure of this JobModel.  # noqa: E501
        :rtype: bool
        """
        return self._cancel_on_blocking_job_failure

    @cancel_on_blocking_job_failure.setter
    def cancel_on_blocking_job_failure(self, cancel_on_blocking_job_failure):
        """Sets the cancel_on_blocking_job_failure of this JobModel.


        :param cancel_on_blocking_job_failure: The cancel_on_blocking_job_failure of this JobModel.  # noqa: E501
        :type: bool
        """

        self._cancel_on_blocking_job_failure = cancel_on_blocking_job_failure

    @property
    def interruptible(self):
        """Gets the interruptible of this JobModel.  # noqa: E501


        :return: The interruptible of this JobModel.  # noqa: E501
        :rtype: bool
        """
        return self._interruptible

    @interruptible.setter
    def interruptible(self, interruptible):
        """Sets the interruptible of this JobModel.


        :param interruptible: The interruptible of this JobModel.  # noqa: E501
        :type: bool
        """

        self._interruptible = interruptible

    @property
    def key(self):
        """Gets the key of this JobModel.  # noqa: E501


        :return: The key of this JobModel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this JobModel.


        :param key: The key of this JobModel.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def id(self):
        """Gets the id of this JobModel.  # noqa: E501


        :return: The id of this JobModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobModel.


        :param id: The id of this JobModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rev(self):
        """Gets the rev of this JobModel.  # noqa: E501


        :return: The rev of this JobModel.  # noqa: E501
        :rtype: str
        """
        return self._rev

    @rev.setter
    def rev(self, rev):
        """Sets the rev of this JobModel.


        :param rev: The rev of this JobModel.  # noqa: E501
        :type: str
        """

        self._rev = rev

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(JobModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
